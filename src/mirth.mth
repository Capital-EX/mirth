

#############
# LOCATIONS #
#############

data Loc
  loc : Int Int -- Loc
end

Loc.generate : Int Int -- Loc
Loc.generate = dip(abs 1+) abs 1+ loc

row : Loc -- Int
col : Loc -- Int
row = match( loc -> drop )
col = match( loc -> nip  )

locNextRow : Loc -- Loc
locNextTab : Loc -- Loc
locNextCol : Loc -- Loc
locNextRow = match( loc -> drop 1+ 1 loc )
locNextTab = match( loc -> 1- 8 over 8 % - + 1+ loc )
locNextCol = match( loc -> 1+ loc )

1 1  loc locNextRow == 2 1 loc
1 10 loc locNextRow == 2 1 loc
1 1  loc locNextTab == 1 9 loc
1 2  loc locNextTab == 1 9 loc
1 5  loc locNextTab == 1 9 loc
1 8  loc locNextTab == 1 9 loc
1 9  loc locNextTab == 1 17 loc
1 12 loc locNextTab == 1 17 loc
1 17 loc locNextTab == 1 25 loc
1 1  loc locNextCol == 1 2 loc

locNextChar : Loc Char -- Loc
locNextChar = dup "\n" str->char chareq if( drop locNextRow,
                  "\t" str->char chareq if( locNextTab, locNextCol ))

locNext : Loc Str -- Loc
locNext = strfold(locNextChar)

1 1 loc "a\nb\nc" locNext == 3 2 loc

##########
# LEXING #
##########

data Token
  INT    : Int -- Token
  STR    : Str -- Token
  WORD   : Str -- Token
  LPAREN : Token
  RPAREN : Token
  COMMA  : Token
end


isDecInt? : Str -- Str Bool
isDecInt? = and?(strnull? not, strall?(isdigit?))
isDecInt? drop == id
""           isDecInt? nip == false
"0"          isDecInt? nip == true
"1"          isDecInt? nip == true
"89"         isDecInt? nip == true
"3622614048" isDecInt? nip == true
"0098767890" isDecInt? nip == true
"1st"        isDecInt? nip == false

isHexInt? : Str -- Str Bool
isHexInt? = dup 2 break@ and?(or?(over "0x" streq, over "0X" streq),
  and?(strnull? not, strall?(ishexdigit?))) dip(drop2)

isHexInt? drop == id
"0"    isHexInt? nip == false
"0x"   isHexInt? nip == false
"0xA"  isHexInt? nip == true
"0x0010"     isHexInt? nip == true
"0xdeadbeef" isHexInt? nip == true
"0xCABc4FED" isHexInt? nip == true
"0xFA12E8EX" isHexInt? nip == false
"0Xa0010aa0" isHexInt? nip == true
implies?(isDecInt?, "0x" over ++ isHexInt? nip) == true

isIgnoreChar? : Char -- Char Bool
isIgnoreChar? = or?('\s' chareq? nip, or?('\t' chareq? nip, '\r' chareq? nip))
isIgnoreChar? drop == id

isCommentChar? : Char -- Char Bool
isCommentChar? = "#" str->char chareq? nip
isCommentChar? drop == id

breakComment : Str -- Str Str
breakComment = strBreakOn ('\n' chareq? nip)

isInt? : Str -- Str Bool
isInt? = or? (isDecInt?, isHexInt?)

data LexState
  lexState : Loc Str -- LexState
end

LexState.generate : Loc Str -- LexState
LexState.generate = lexState

lexStateLoc? : LexState -- LexState Loc
lexStateLoc? = match( lexState -> over dip(lexState) )
lexStateLoc? drop == id

lexStateEOF? : LexState -- LexState Bool
lexStateEOF? = dup match( lexState -> nip strnull )
lexStateEOF? drop == id

lexStateTest?(f: Char -- Char Bool) : LexState -- LexState Bool
lexStateTest?(f) = dup match( lexState ->
  nip strview match (
    strnil -> drop false,
    strcons -> drop f nip
  )
)

lexStateTakeUntil(f: Char -- Char Bool) : LexState -- LexState Str
lexStateTakeUntil(f) = match(
  lexState -> strBreakOn(f) over dip2(locNext) dip(lexState)
)

lexStateTakeWhile(f: Char -- Char Bool) : LexState -- LexState Str
lexStateTakeWhile(f) = lexStateTakeUntil(f not)

data LexResult
  lexToken : LexState Loc Token -- LexResult
  lexError : Loc Str -- LexResult
  lexDone  : LexResult
end

data LexRuleResult
  lexRRNA    : LexState  -- LexRuleResult
  lexRRSkip  : LexState  -- LexRuleResult
  lexRRYield : LexResult -- LexRuleResult
end

mkLexer(f : LexRuleResult -- LexRuleResult) : LexState -- LexResult
mkLexer(f) = lexRRNA f match(
  lexRRNA    -> match( lexState -> drop "Unknown token." lexError ),
  lexRRSkip  -> mkLexer(f),
  lexRRYield -> id
)

mkLexRule(f: LexState -- LexRuleResult) : LexRuleResult -- LexRuleResult
mkLexRule(f) = match(
  lexRRNA    -> f,
  lexRRSkip  -> lexRRSkip,
  lexRRYield -> lexRRYield
)

lexRuleEOF : LexRuleResult -- LexRuleResult
lexRuleEOF = mkLexRule(lexStateEOF? if(drop lexDone lexRRYield, lexRRNA))

lexRuleSkip( p: Char -- Char Bool
           , q: Char -- Char Bool
           ) : LexRuleResult -- LexRuleResult
lexRuleSkip(p,q) = mkLexRule(
  lexStateTest?(p) if(
    lexStateTakeUntil(q) drop lexRRSkip,
    lexRRNA
  )
)

lexRuleYield( p: Char -- Char Bool
            , q: LexState -- LexState Token
            ) : LexRuleResult -- LexRuleResult
lexRuleYield(p,q) = mkLexRule(
  lexStateTest?(p) if(
    lexStateLoc? dip(q) swap lexToken lexRRYield,
    lexRRNA
  )
)

lexStart : Str -- LexState
lexStart = dip(1 1 loc) lexState

lexNext : LexState -- LexResult
lexNext = mkLexer(
  lexRuleEOF
  lexRuleSkip(isIgnoreChar?, isIgnoreChar? not)
  lexRuleSkip(isCommentChar?, '\n' chareq? nip)
)



