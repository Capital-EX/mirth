

#############
# LOCATIONS #
#############

data Loc
  loc : Int Int -- Loc
end

Loc.generate : Int Int -- Loc
Loc.generate = dip(abs 1+) abs 1+ loc

row : Loc -- Int
col : Loc -- Int
row = match( loc -> drop )
col = match( loc -> nip  )

locNextRow : Loc -- Loc
locNextTab : Loc -- Loc
locNextCol : Loc -- Loc
locNextRow = match( loc -> drop 1+ 1 loc )
locNextTab = match( loc -> 1- 8 over 8 % - + 1+ loc )
locNextCol = match( loc -> 1+ loc )

1 1  loc locNextRow == 2 1 loc
1 10 loc locNextRow == 2 1 loc
1 1  loc locNextTab == 1 9 loc
1 2  loc locNextTab == 1 9 loc
1 5  loc locNextTab == 1 9 loc
1 8  loc locNextTab == 1 9 loc
1 9  loc locNextTab == 1 17 loc
1 12 loc locNextTab == 1 17 loc
1 17 loc locNextTab == 1 25 loc
1 1  loc locNextCol == 1 2 loc

locNextChar : Loc Char -- Loc
locNextChar = dup "\n" str->char chareq if( drop locNextRow,
                  "\t" str->char chareq if( locNextTab, locNextCol ))

locNext : Loc Str -- Loc
locNext = strfold(locNextChar)

1 1 loc "a\nb\nc" locNext == 3 2 loc

##########
# TOKENS #
##########

data Token
  TINT     : Int -- Token
  TSTR     : Str -- Token
  TNAME    : Str -- Token
  TLPAREN  : Token
  TRPAREN  : Token
  TCOMMA   : Token
  TCOLON   : Token
  TEQUAL   : Token
  TEQUAL2  : Token
  TNEWLINE : Token
end

tokenIsInt?     : Token -- Token Bool
tokenIsStr?     : Token -- Token Bool
tokenIsName?    : Token -- Token Bool
tokenIsLParen?  : Token -- Token Bool
tokenIsRParen?  : Token -- Token Bool
tokenIsComma?   : Token -- Token Bool
tokenIsColon?   : Token -- Token Bool
tokenIsEqual?   : Token -- Token Bool
tokenIsEqual2?  : Token -- Token Bool
tokenIsNewline? : Token -- Token Bool

tokenGetInt     : Token -- Int
tokenGetStr     : Token -- Str
tokenGetName    : Token -- Str

tokenIsInt? = dup match(
  TINT     -> drop true,
  TSTR     -> drop false,
  TNAME    -> drop false,
  TLPAREN  -> false,
  TRPAREN  -> false,
  TCOMMA   -> false,
  TCOLON   -> false,
  TEQUAL   -> false,
  TEQUAL2  -> false,
  TNEWLINE -> false
)

tokenGetInt = match(
  TINT     -> ,
  TSTR     -> drop 0,
  TNAME    -> drop 0,
  TLPAREN  -> 0,
  TRPAREN  -> 0,
  TCOMMA   -> 0,
  TCOLON   -> 0,
  TEQUAL   -> 0,
  TEQUAL2  -> 0,
  TNEWLINE -> 0
)


tokenIsStr? = dup match(
  TINT     -> drop false,
  TSTR     -> drop true,
  TNAME    -> drop false,
  TLPAREN  -> false,
  TRPAREN  -> false,
  TCOMMA   -> false,
  TCOLON   -> false,
  TEQUAL   -> false,
  TEQUAL2  -> false,
  TNEWLINE -> false
)

tokenGetStr = match(
  TINT     -> drop "",
  TSTR     -> ,
  TNAME    -> drop "",
  TLPAREN  -> "",
  TRPAREN  -> "",
  TCOMMA   -> "",
  TCOLON   -> "",
  TEQUAL   -> "",
  TEQUAL2  -> "",
  TNEWLINE -> ""
)


tokenIsName? = dup match(
  TINT     -> drop false,
  TSTR     -> drop false,
  TNAME    -> drop true,
  TLPAREN  -> false,
  TRPAREN  -> false,
  TCOMMA   -> false,
  TCOLON   -> false,
  TEQUAL   -> false,
  TEQUAL2  -> false,
  TNEWLINE -> false
)

tokenGetName = match(
  TINT     -> drop "",
  TSTR     -> drop "",
  TNAME    -> ,
  TLPAREN  -> "",
  TRPAREN  -> "",
  TCOMMA   -> "",
  TCOLON   -> "",
  TEQUAL   -> "",
  TEQUAL2  -> "",
  TNEWLINE -> ""
)

tokenIsLParen? = dup match(
  TINT     -> drop false,
  TSTR     -> drop false,
  TNAME    -> drop false,
  TLPAREN  -> true,
  TRPAREN  -> false,
  TCOMMA   -> false,
  TCOLON   -> false,
  TEQUAL   -> false,
  TEQUAL2  -> false,
  TNEWLINE -> false
)

tokenIsRParen? = dup match(
  TINT     -> drop false,
  TSTR     -> drop false,
  TNAME    -> drop false,
  TLPAREN  -> false,
  TRPAREN  -> true,
  TCOMMA   -> false,
  TCOLON   -> false,
  TEQUAL   -> false,
  TEQUAL2  -> false,
  TNEWLINE -> false
)

tokenIsComma? = dup match(
  TINT     -> drop false,
  TSTR     -> drop false,
  TNAME    -> drop false,
  TLPAREN  -> false,
  TRPAREN  -> false,
  TCOMMA   -> true,
  TCOLON   -> false,
  TEQUAL   -> false,
  TEQUAL2  -> false,
  TNEWLINE -> false
)

tokenIsColon? = dup match(
  TINT     -> drop false,
  TSTR     -> drop false,
  TNAME    -> drop false,
  TLPAREN  -> false,
  TRPAREN  -> false,
  TCOMMA   -> false,
  TCOLON   -> true,
  TEQUAL   -> false,
  TEQUAL2  -> false,
  TNEWLINE -> false
)

tokenIsEqual? = dup match(
  TINT     -> drop false,
  TSTR     -> drop false,
  TNAME    -> drop false,
  TLPAREN  -> false,
  TRPAREN  -> false,
  TCOMMA   -> false,
  TCOLON   -> false,
  TEQUAL   -> true,
  TEQUAL2  -> false,
  TNEWLINE -> false
)

tokenIsEqual2? = dup match(
  TINT     -> drop false,
  TSTR     -> drop false,
  TNAME    -> drop false,
  TLPAREN  -> false,
  TRPAREN  -> false,
  TCOMMA   -> false,
  TCOLON   -> false,
  TEQUAL   -> false,
  TEQUAL2  -> true,
  TNEWLINE -> false
)

tokenIsNewline? = dup match(
  TINT     -> drop false,
  TSTR     -> drop false,
  TNAME    -> drop false,
  TLPAREN  -> false,
  TRPAREN  -> false,
  TCOMMA   -> false,
  TCOLON   -> false,
  TEQUAL   -> false,
  TEQUAL2  -> false,
  TNEWLINE -> true
)

##########
# LEXING #
##########

isDecInt? : Str -- Str Bool
isDecInt? = and?(strnull? not, strall?(isdigit?))
isDecInt? drop == id
""           isDecInt? nip == false
"0"          isDecInt? nip == true
"1"          isDecInt? nip == true
"89"         isDecInt? nip == true
"3622614048" isDecInt? nip == true
"0098767890" isDecInt? nip == true
"1st"        isDecInt? nip == false

isHexInt? : Str -- Str Bool
isHexInt? = dup 2 strBreakAt and?(or?(over "0x" streq, over "0X" streq),
  and?(strnull? not, strall?(ishexdigit?))) dip(drop2)

isHexInt? drop == id
"0"    isHexInt? nip == false
"0x"   isHexInt? nip == false
"0xA"  isHexInt? nip == true
"0x0010"     isHexInt? nip == true
"0xdeadbeef" isHexInt? nip == true
"0xCABc4FED" isHexInt? nip == true
"0xFA12E8EX" isHexInt? nip == false
"0Xa0010aa0" isHexInt? nip == true
implies?(isDecInt?, "0x" over <> isHexInt? nip) == true

isIgnoreChar? : Char -- Char Bool
isIgnoreChar? = or?('\s' chareq? nip, or?('\t' chareq? nip, '\r' chareq? nip))
isIgnoreChar? drop == id

isCommentChar? : Char -- Char Bool
isCommentChar? = "#" str->char chareq? nip
isCommentChar? drop == id

breakComment : Str -- Str Str
breakComment = strBreakOn ('\n' chareq? nip)

isInt? : Str -- Str Bool
isInt? = or? (isDecInt?, isHexInt?)

data LexState
  lexState : Loc Str -- LexState
end

LexState.generate : Loc Str -- LexState
LexState.generate = lexState

lexStateLoc? : LexState -- LexState Loc
lexStateLoc? = match( lexState -> over dip(lexState) )
lexStateLoc? drop == id

lexStateEOF? : LexState -- LexState Bool
lexStateEOF? = dup match( lexState -> nip strnull )
lexStateEOF? drop == id

lexStateTest?(f: Char -- Char Bool) : LexState -- LexState Bool
lexStateTest?(f) = dup match( lexState ->
  nip strview match (
    strnil -> drop false,
    strcons -> drop f nip
  )
)

lexStateTake1 : LexState -- LexState Char
lexStateTake1 = match(
  lexState -> strview match(
    strnil -> "" lexState 0 int->char,
    strcons -> over dip2(locNextChar) dip(lexState)
  )
)

lexStateTakeUntil(f: Char -- Char Bool) : LexState -- LexState Str
lexStateTakeUntil(f) = match(
  lexState -> strBreakOn(f) over dip2(locNext) dip(lexState)
)

lexStateTakeWhile(f: Char -- Char Bool) : LexState -- LexState Str
lexStateTakeWhile(f) = lexStateTakeUntil(f not)

data LexResult
  lexToken : LexState Loc Token -- LexResult
  lexError : Loc Str -- LexResult
  lexDone  : LexResult
end

data LexRuleResult
  lexRRNA    : LexState  -- LexRuleResult
  lexRRSkip  : LexState  -- LexRuleResult
  lexRRYield : LexResult -- LexRuleResult
end

mkLexer(f : LexRuleResult -- LexRuleResult) : LexState -- LexResult
mkLexer(f) = lexRRNA f match(
  lexRRNA    -> match( lexState -> drop "Unknown token." lexError ),
  lexRRSkip  -> mkLexer(f),
  lexRRYield -> id
)

lexRule(f: LexState -- LexRuleResult) : LexRuleResult -- LexRuleResult
lexRule(f) = match(
  lexRRNA    -> f,
  lexRRSkip  -> lexRRSkip,
  lexRRYield -> lexRRYield
)

lexRuleEOF : LexRuleResult -- LexRuleResult
lexRuleEOF = lexRule(lexStateEOF? if(drop lexDone lexRRYield, lexRRNA))

lexRuleSkip( p: Char -- Char Bool
           , q: Char -- Char Bool
           ) : LexRuleResult -- LexRuleResult
lexRuleSkip(p,q) = lexRule(
  lexStateTest?(p) if(
    lexStateTakeUntil(q) drop lexRRSkip,
    lexRRNA
  )
)

lexRuleYield( p: Char -- Char Bool
            , q: LexState -- LexState Token
            ) : LexRuleResult -- LexRuleResult
lexRuleYield(p,q) = lexRule(
  lexStateTest?(p) if(
    lexStateLoc? dip(q) swap lexToken lexRRYield,
    lexRRNA
  )
)

lexRuleChar( p: Str, q: Token ) : LexRuleResult -- LexRuleResult
lexRuleChar(p,q) = lexRuleYield(p str->char chareq? nip, lexStateTake1 drop q)

isNameChar? : Char -- Char Bool
isNameChar? = ":,() \n\r\t\"" strelem? not nip
isNameChar? drop == id

lexRuleName( test: Str -- Str Bool
           , conv: Str -- Token
           ) : LexRuleResult -- LexRuleResult
lexRuleName(test,conv) = lexRule(
  lexStateLoc? over
  lexStateTakeWhile(isNameChar?)
  test if(
    dip(swap) conv lexToken lexRRYield nip,
    drop3 lexRRNA
  )
)

digitVal : Char -- Int
digitVal = isdigit? if(char->int "0" str->char char->int -,
  isupper? if(char->int "A" str->char char->int - 10 +,
  islower? if(char->int "a" str->char char->int - 10 +,
  drop 0
)))

readIntBase(b: Int) : Int Str -- Int
readIntBase(b) = strview match(
  strnil -> id,
  strcons -> dip(dip(b *) digitVal +) readIntBase(b)
)

readInt : Str -- Int
readInt = 2 strBreakAt dip?(or?("0x" streq? nip, "0X" streq? nip)) if(
  nip dip(0) readIntBase(16),
  <>  dip(0) readIntBase(10)
)

"102030" readInt == 102030
"0987654321" readInt == 987654321
"0xABCDEF" readInt == 0xABCDEF
"0Xdeadbeefca1234567890" readInt == 0Xdeadbeefca1234567890

lexStart : Str -- LexState
lexStart = dip(1 1 loc) lexState

lexNext : LexState -- LexResult
lexNext = mkLexer(
  lexRuleEOF
  lexRuleSkip(isIgnoreChar?, isIgnoreChar? not)
  lexRuleSkip(isCommentChar?, '\n' chareq? nip)
  lexRuleChar("(", TLPAREN)
  lexRuleChar(")", TRPAREN)
  lexRuleChar(",", TCOMMA)
  lexRuleChar(":", TCOLON)
  lexRuleChar("\n", TNEWLINE)
  lexRuleName(isInt?, readInt TINT)
  lexRuleName(strnull? not, TNAME)
)

# lexer tests
"" lexStart lexNext == lexDone
"  \t   " lexStart lexNext == lexDone
"(" lexStart lexNext == 1 2 loc "" lexState 1 1 loc TLPAREN lexToken
")" lexStart lexNext == 1 2 loc "" lexState 1 1 loc TRPAREN lexToken
"," lexStart lexNext == 1 2 loc "" lexState 1 1 loc TCOMMA lexToken
":" lexStart lexNext == 1 2 loc "" lexState 1 1 loc TCOLON lexToken
"foo bar" lexStart lexNext == 1 4 loc " bar" lexState 1 1 loc "foo" TNAME lexToken
"foo:bar" lexStart lexNext == 1 4 loc ":bar" lexState 1 1 loc "foo" TNAME lexToken
"123,456" lexStart lexNext == 1 4 loc ",456" lexState 1 1 loc 123 TINT lexToken
"foo(bar)" lexStart lexNext == 1 4 loc "(bar)" lexState 1 1 loc "foo" TNAME lexToken
"  \t  b  ()" lexStart lexNext == 1 12 loc "  ()" lexState 1 11 loc "b" TNAME lexToken
"  \n  b" lexStart lexNext == 2 1 loc "  b" lexState 1 3 loc TNEWLINE lexToken

##########
# PARSER #
##########


data PDom
  PDOM : LexState -- PDom
end

data PCod(t)
  PPURE : LexState t -- PCod(t)
  PNONE : LexState   -- PCod(t)
  PFAIL : Loc Str    -- PCod(t)
end

ppure( f : t
     )   : PDom -- PCod(t)

ptok( f: Token -- Token Bool
    , g: Loc Token -- t
    )  : PDom -- PCod(t)

pseq1( f : Loc a -- b
     , p : PDom -- PCod(a)
     )   : PDom -- PCod(b)

pseq2( f : Loc a b -- c
     , p : PDom -- PCod(a)
     , q : PDom -- PCod(b)
     )   : PDom -- PCod(c)

pseq3( f : Loc a b c -- d
     , p : PDom -- PCod(a)
     , q : PDom -- PCod(b)
     , r : PDom -- PCod(c)
     )   : PDom -- PCod(d)

palt2( f : PDom -- PCod(t)
     , g : PDom -- PCod(t)
     )   : PDom -- PCod(t)

pstar( f : PDom -- PCod(t)
     )   : PDom -- PCod(List(t))

pstarsep( f : Token -- Token Bool
        , p : PDom  -- PCod(t)
        )   : PDom -- PCod(List(t))

pparens( p : PDom -- PCod(t)
       )   : PDom -- PCod(t)

##########
# SYNTAX #
##########

# no mutual types in bootstrap
# yes this is silly...

data Name
  name : Loc Str -- Name
end

nameLoc : Name -- Loc
nameLoc = match( name -> drop )

name->str : Name -- Str
name->str = match( name -> nip )

pname : PDom -- PCod(Name)
pname = ptok(tokenIsName?, tokenGetName name)

data Lit
  LINT : Loc Int -- Lit
  LSTR : Loc Str -- Lit
end

litLoc : Lit -- Loc
litLoc = match(
  LINT -> drop,
  LSTR -> drop
)

plit : PDom -- PCod(Lit)
plit = palt2( ptok(tokenIsInt?, tokenGetInt LINT)
            , ptok(tokenIsStr?, tokenGetStr LSTR) )


data Atom
  ALIT  : Loc Lit -- Atom
  AWORD : Loc Name List(List(Atom)) -- Atom
end

patom : PDom -- PCod(Atom)
pexpr : PDom -- PCod(List(Atom))
pargs : PDom -- PCod(List(List(Atom)))
patom = palt2( pseq1(ALIT,  plit)
             , pseq2(AWORD, pname, pargs) )
pexpr = pstar( patom )
pargs = palt2( pparens(pstarsep(tokenIsComma?, pexpr))
             , ppure(nil) )

data StackTypeExpr
  SNIL  :               Loc                 -- StackTypeExpr
  SVAR  :               Loc Name            -- StackTypeExpr
  SWORD : StackTypeExpr Loc Name List(Atom) -- StackTypeExpr
end

stackTypeExprLoc : StackTypeExpr -- Loc
stackTypeExprLoc = match(
  SNIL -> ,
  SVAR -> drop,
  SWORD -> drop2 nip
)

data WordTypeExpr
  wordTypeExpr : Loc StackTypeExpr StackTypeExpr -- WordTypeExpr
end

wordTypeExprLoc : WordTypeExpr -- Loc
wordTypeExprDom : WordTypeExpr -- StackTypeExpr
wordTypeExprCod : WordTypeExpr -- StackTypeExpr
wordTypeExprLoc = match( wordTypeExpr -> drop2 )
wordTypeExprDom = match( wordTypeExpr -> drop nip )
wordTypeExprCod = match( wordTypeExpr -> dip(drop2) )


data WordSigParams
  WSPNIL  : Loc                                 -- WordSigParams
  WSPCONS : Loc Name WordTypeExpr WordSigParams -- WordSigParams
end

wordSigParamsLoc  : WordSigParams -- Loc
wordSigParamsLen  : WordSigParams -- Int
wordSigParamsNext : WordSigParams -- WordSigParams

wordSigParamsLoc = match(
  WSPNIL  -> ,
  WSPCONS -> drop3
)
wordSigParamsLen = match(
  WSPNIL  -> drop 0,
  WSPCONS -> dip(drop2) wordSigParamsLen 1+
)
wordSigParamsNext = match(
  WSPNIL -> WSPNIL,
  WSPCONS -> dip(drop2)
)

data WordSig
  wordSig : Loc Name WordSigParams WordTypeExpr -- WordSig
end

wordSigLoc    : WordSig -- Loc
wordSigName   : WordSig -- Name
wordSigParams : WordSig -- WordSigParams
wordSigType   : WordSig -- WordTypeExpr

data WordDefParams
  WDPNIL  : Loc                    -- WordDefParams
  WDPCONS : Loc Name WordDefParams -- WordDefParams
end

wordDefParamsLoc  : WordDefParams -- Loc
wordDefParamsLen  : WordDefParams -- Int
wordDefParamsNext : WordDefParams -- WordDefParams

wordDefParamsLoc = match(
  WDPNIL -> ,
  WDPCONS -> drop2
)
wordDefParamsLen = match(
  WDPNIL -> drop 0,
  WDPCONS -> dip(drop2) wordDefParamsLen 1+
)
wordDefParamsNext = match(
  WDPNIL -> WDPNIL,
  WDPCONS -> dip(drop2)
)

data WordDef
  wordDef : Loc Name WordDefParams List(Atom) -- WordDef
end

wordDefLoc    : WordDef -- Loc
wordDefName   : WordDef -- Name
wordDefParams : WordDef -- WordDefParams
wordDefBody   : WordDef -- List(Atom)
wordDefLoc    = match( wordDef -> drop3 )
wordDefName   = match( wordDef -> drop2 nip )
wordDefParams = match( wordDef -> drop dip(drop2) )
wordDefBody   = match( wordDef -> dip(drop3) )

data Assertion
  assertion : Loc List(Atom) List(Atom) -- Assertion
end

assertionLoc : Assertion -- Loc
assertionLHS : Assertion -- List(Atom)
assertionRHS : Assertion -- List(Atom)
assertionLoc = match( assertion -> drop2 )
assertionLHS = match( assertion -> drop nip )
assertionRHS = match( assertion -> dip(drop2) )

data Decl
  # declarations
  DWORDSIG   : Loc WordSig   -- Decl
  DWORDDEF   : Loc WordDef   -- Decl
  DASSERTION : Loc Assertion -- Decl
end

declLoc : Decl -- Loc
declLoc = match(
  DWORDSIG -> drop,
  DWORDDEF -> drop,
  DASSERTION -> drop
)

data Body
  body : Loc List(Decl) -- Body
end

bodyLoc : Body -- Loc
bodyLoc = match( body -> drop )

bodyDecls : Body -- List(Decl)
bodyDecls = match( body -> nip )


