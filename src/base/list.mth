
import base/nat

export base/list
  type Nat
  nil    : List(t)
  cat    : List(t) List(t) -- List(t)
  ++     : List(t) List(t) -- List(t)
  cons   : List(t) t -- List(t)
  snoc   : t List(t) -- List(t)

  len? : List(t) -- List(t) Nat
  len  : List(t) -- Nat

  nil?    : List(t) -- List(t) Bool


  lpure : t -- List(t)
  lmap(f: a -- b) : List(a) -- List(b)
  lfor(f: *a b -- *a) : *a List(b) -- *a
  lbreak : List(t) Nat -- List(t) List(t)

end


nil     = _prim_list_nil
cat     = _prim_list_cat
cons    = _prim_list_cons
len     = _prim_list_len znat
lmap(f) = _prim_list_map(f)
lfor(f) = _prim_list_for(f)
lbreak  = nint _prim_list_break

++    = cat
snoc  = dip(dip(nil) cons) cat
len?  = dup len
nil?  = len? n0 n=
lpure = dip(nil) cons

