
import base/maybe
export base/result
  type Result(e,t)
  Result.generate : e t Bool -- Result(e,t)

  err : e -- Result(e,t)
  ok  : t -- Result(e,t)

  err? : Result(e,t) -- Result(e,t) Bool
  ok?  : Result(e,t) -- Result(e,t) Bool

  relim(f : *a e -- *b, g : *a t -- *b) : *a Result(e,t) -- *b
  rmap(f : a -- b) : Result(e,a) -- Result(e,b)
  rfor(f : *a t -- *a) : *a Result(e,t) -- *a
  rthen(f : a -- Result(e,b)) : Result(e,a) -- Result(e,b)

  result->maybe : Result(e,t) -- Maybe(t)

end

data Result(e,t)
  err : e -- Result(e,t)
  ok  : t -- Result(e,t)
end

Result.generate = if(drop err, nip ok)

relim(f,g) = match(err -> f, ok -> g)
rmap(f) = relim(err, f ok)
rfor(f) = relim(drop, f)
rthen(f) = relim(err, f)

result->maybe = relim(drop none, some)

err? = relim(err true, ok false)
ok?  = relim(err false, ok true)

err? drop == id
ok?  drop == id
err? == ok? not

