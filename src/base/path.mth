import base/nat
import base/str
import base/list
import base/io
import base/unit

export base/path
  type Path

  Path.generate : Bool List(Int) Bool Bool -- Path

  path->str : Path -- Str
  str->path : Str -- Path
  path      : Str -- Path
  unpath    : Path -- Str

  absolute? : Path -- Path Bool
  relative? : Path -- Path Bool

  pathSep     : Str
  hasPathSep? : Path -- Path Bool
  addPathSep  : Path -- Path
  delPathSep  : Path -- Path

  nilpath  : Path
  nilpath? : Path -- Path Bool

  </> : Path Path -- Path
  <.> : Path Str  -- Path
end

export base/path/unsafe
  type Path
  unsafe_listdir   : Path -- List(Path)
  unsafe_listdirs  : Path -- List(Path) # list directories recursively
  unsafe_listfiles : Path -- List(Path) # list files recursively
  unsafe_isdir     : Path -- Bool
  unsafe_isfile    : Path -- Bool
  unsafe_read      : Path -- Str
  unsafe_write     : Str Path --
  unsafe_append    : Str Path --
end

export base/path/io
  type Unit
  type IO(t)
  listdir   : Path -- IO(List(Path))
  listdirs  : Path -- IO(List(Path))
  listfiles : Path -- IO(List(Path))
  isdir     : Path -- IO(Bool)
  isfile    : Path -- IO(Bool)
  read      : Path -- IO(Str)
  write     : Str Path -- IO(Unit)
  append    : Str Path -- IO(Unit)
end

data Path
  path : Str -- Path
end

Path.generate : Bool List(Int) Bool Bool -- Path
Path.generate = $(
  dip2?(nil? not) and
  dip3(if("/", "") path)
  dip2(for(Nat.generate nat->str dip("f") <> path </>))
  dip(if(addPathSep, id))
  if("txt" <.>, id)
)

unpath = match(path -> id)
str->path = path
path->str = unpath

nilpath : Path
nilpath = "" path

nilpath? : Path -- Path Bool
nilpath? = dup unpath strnull

unixrootpath : Path
unixrootpath = "/" path

unixrootpath? : Path -- Path Bool
unixrootpath? = dup unpath "/" streq

unixhomepath : Path
unixhomepath = "~" path

unixhomepath? : Path -- Path Bool
unixhomepath? = dup unpath "~" streq

defaultrootpath : Str
defaultrootpath = "/" # FIXME: windows support

absolute? = or?(
  dup unpath dip("/") strprefix,
  dup unpath dip("~") strprefix
)

# FIXME: windows support, home path (~) support
relative? = absolute? not

nilpath      absolute? nip == false
unixrootpath absolute? nip == true
unixhomepath absolute? nip == true

pathSep : Str
pathSep = "/" # FIXME: windows support

hasPathSep : Path -- Bool
hasPathSep = unpath strlen? n1- znat strbreak nip pathSep streq

hasPathSep? : Path -- Path Bool
hasPathSep? = dup hasPathSep

addPathSep : Path -- Path
addPathSep =
  cond(
    nilpath? -> id,
    hasPathSep? -> id,
    unpath "/" <> path
  )

delPathSep : Path -- Path
delPathSep =
  cond(
    nilpath? -> id,
    hasPathSep? not -> id,
    unixrootpath? -> id,
    unpath strlen? n1- znat strbreak drop path
  )

addPathSep hasPathSep == nilpath? not nip
delPathSep hasPathSep == unixrootpath? nip
addPathSep addPathSep == addPathSep
delPathSep addPathSep == addPathSep
addPathSep delPathSep == delPathSep
delPathSep delPathSep == delPathSep

nilpath? nip == addPathSep nilpath? nip
nilpath? nip == delPathSep nilpath? nip
absolute? nip == addPathSep absolute? nip
absolute? nip == delPathSep absolute? nip

</> = cond(
  absolute? -> nip,
  dip?(nilpath?) -> nip,
  dip(addPathSep) both(unpath) <> path
)

</> </> == dip(</>) </>
dip(nilpath) </> == id
nilpath </> nilpath </> == nilpath </>

</> absolute? == or?(dip?(absolute?), absolute?) dip(</>)
</> relative? == and?(dip?(relative?), relative?) dip(</>)

<.> = dip(unpath ".") <> <> path

unsafe_listdir   = unpath _prim_unsafe_listdir map(path)
unsafe_listdirs  = unpath _prim_unsafe_walk lbind(unpack3 drop dip(path) formap(dip(dup) path </>) nip)
unsafe_listfiles = unpath _prim_unsafe_walk lbind(unpack3 nip  dip(path) formap(dip(dup) path </>) nip)
unsafe_isdir     = unpath _prim_unsafe_isdir
unsafe_isfile    = unpath _prim_unsafe_isfile
unsafe_read      = unpath _prim_unsafe_read
unsafe_write     = unpath _prim_unsafe_write
unsafe_append    = unpath _prim_unsafe_append

listdir   = pure iomap(unsafe_listdir)
listdirs  = pure iomap(unsafe_listdirs)
listfiles = pure iomap(unsafe_listfiles)
isdir     = pure iomap(unsafe_isdir)
isfile    = pure iomap(unsafe_isfile)
read      = pure iomap(unsafe_read)
write     = pure2 iomap2(unsafe_write unit)
append    = pure2 iomap2(unsafe_append unit)

