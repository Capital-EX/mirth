
export mirth/loc
  type Loc
  Loc.generate : Int Int -- Loc

  locRow      : Loc -- Int
  locCol      : Loc -- Int
  locStart    : Loc
  locNextRow  : Loc      -- Loc
  locNextTab  : Loc      -- Loc
  locNextCol  : Loc      -- Loc
  locNextChar : Loc Char -- Loc
  locNext     : Loc Str  -- Loc
end

data Loc
  loc : Int Int -- Loc
end

Loc.generate = dip(abs 1+) abs 1+ loc

locRow = match( loc -> drop )
locCol = match( loc -> nip  )

locStart = 1 1 loc

locNextRow = match( loc -> drop 1+ 1 loc )
locNextTab = match( loc -> 1- 8 over 8 % - + 1+ loc )
locNextCol = match( loc -> 1+ loc )

1 1  loc locNextRow == 2 1 loc
1 10 loc locNextRow == 2 1 loc
1 1  loc locNextTab == 1 9 loc
1 2  loc locNextTab == 1 9 loc
1 5  loc locNextTab == 1 9 loc
1 8  loc locNextTab == 1 9 loc
1 9  loc locNextTab == 1 17 loc
1 12 loc locNextTab == 1 17 loc
1 17 loc locNextTab == 1 25 loc
1 1  loc locNextCol == 1 2 loc

isNewLine? : Char -- Char Bool
isNewLine? = dup "\n" str->char chareq

isTab? : Char -- Char Bool
isTab? = dup "\t" str->char chareq

locNextChar =
  cond(
    isNewLine? -> drop locNextRow,
    isTab?     -> drop locNextTab,
                  drop locNextCol
  )

locNext = strfold(locNextChar)

1 1 loc "a\nb\nc" locNext == 3 2 loc

