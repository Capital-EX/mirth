
import base/nat
import base/pos
import base/char
import base/str
export mirth/loc
  type Loc
  type Pos
  type Char
  Loc.generate : Int Int -- Loc
  loc          : Pos Pos -- Loc
  locRow       : Loc -- Pos
  locCol       : Loc -- Pos
  locStart     : Loc
  locNextRow   : Loc -- Loc
  locNextTab   : Loc -- Loc
  locNextCol   : Loc -- Loc
  locNextChar  : Loc Char -- Loc
  locNext      : Loc Str  -- Loc
end

data Loc
  loc : Pos Pos -- Loc
end

Loc.generate = dip(Pos.generate) Pos.generate loc

locRow = match( loc -> drop )
locCol = match( loc -> nip  )

locStart = p1 p1 loc

locNextRow = match( loc -> drop p1+ p1 loc )
locNextTab = match( loc -> p1- 8 znat over 8 zpos n% n- znat n+ n1+ loc )
locNextCol = match( loc -> p1+ loc )

p1 p1      loc locNextRow == p2 p1      loc
p1 10 zpos loc locNextRow == p2 p1      loc
p1 p1      loc locNextTab == p1  9 zpos loc
p1 p2      loc locNextTab == p1  9 zpos loc
p1  5 zpos loc locNextTab == p1  9 zpos loc
p1  8 zpos loc locNextTab == p1  9 zpos loc
p1  9 zpos loc locNextTab == p1 17 zpos loc
p1 12 zpos loc locNextTab == p1 17 zpos loc
p1 17 zpos loc locNextTab == p1 25 zpos loc
p1 p1      loc locNextCol == p1 p2      loc

isNewLine? : Char -- Char Bool
isNewLine? = dup "\n" str->char chareq

isTab? : Char -- Char Bool
isTab? = dup "\t" str->char chareq

locNextChar =
  cond(
    isNewLine? -> drop locNextRow,
    isTab?     -> drop locNextTab,
                  drop locNextCol
  )

locNext = strfold(locNextChar)

locStart "a\nb\nc" locNext == 3 zpos p2 loc

