
import base/nat
import base/pos
import base/char
import base/str

import mirth/types/mod
export mirth/loc
  type Loc
  type Pos
  type Mod
  type Char
  Loc.generate : Int Int Int -- Loc
  loc          : Mod Pos Pos -- Loc
  loc->str     : Loc -- Str
  locMod       : Loc -- Mod
  locRow       : Loc -- Pos
  locCol       : Loc -- Pos
  locStart     : Mod -- Loc
  locNextRow   : Loc -- Loc
  locNextTab   : Loc -- Loc
  locNextCol   : Loc -- Loc
  locNextChar  : Loc Char -- Loc
  locNext      : Loc Str  -- Loc
end

data Loc
  loc : Mod Pos Pos -- Loc
end

Loc.generate = dip2(Mod.generate) both(Pos.generate) loc

unloc : Loc -- Mod Pos Pos
unloc = match( loc -> id )

reloc(f : Mod Pos Pos -- Mod Pos Pos) : Loc -- Loc
reloc(f) = unloc f loc

loc->str = unloc dip2(mod->str) both(pos->str) dip(both(":" <>)) <> <>

locMod = unloc drop2
locRow = unloc drop nip
locCol = unloc dip(drop2)

locStart = p1 p1 loc

locNextRow = reloc( drop p1+ p1 )
locNextTab = reloc( p1- 8 znat over 8 zpos n% n- znat n+ n1+ )
locNextCol = reloc( p1+ )

p1 p1      loc locNextRow == p2 p1      loc
p1 10 zpos loc locNextRow == p2 p1      loc
p1 p1      loc locNextTab == p1  9 zpos loc
p1 p2      loc locNextTab == p1  9 zpos loc
p1  5 zpos loc locNextTab == p1  9 zpos loc
p1  8 zpos loc locNextTab == p1  9 zpos loc
p1  9 zpos loc locNextTab == p1 17 zpos loc
p1 12 zpos loc locNextTab == p1 17 zpos loc
p1 17 zpos loc locNextTab == p1 25 zpos loc
p1 p1      loc locNextCol == p1 p2      loc

isNewLine? : Char -- Char Bool
isNewLine? = dup "\n" str->char chareq

isTab? : Char -- Char Bool
isTab? = dup "\t" str->char chareq

locNextChar =
  cond(
    isNewLine? -> drop locNextRow,
    isTab?     -> drop locNextTab,
                  drop locNextCol
  )

locNext = strfold(locNextChar)

locStart "a\nb\nc" locNext == 3 zpos p2 loc

