
import base/maybe
import base/void
import base/map
import base/result
import base/int
import base/str

import mirth/mod
import mirth/name
import mirth/loc
import mirth/syntax

export mirth/symbol
  type Symbol
end

export mirth/core
  type L(x)
  type Symbol
  type CEnv
  type CDef
  type CCtx
  type CSort

  type CTypes
  type CType
  type CValues
  type CValue
  type CEffect
  type CWord
  type CArgs
  type CArg
end

data Symbol
  MkSymbol : Mod Name -- Symbol
end

symbol->str : Symbol -- Str

data CEnv
  MkCEnv : Map(Symbol, CDef) -- CEnv
end

data CDef
  MkCDef : CCtx CSort Maybe(CArg) -- CDef
end

unCDef : CDef -- CCtx CSort Maybe(CArg)
unCDef = match(MkCDef -> id)

data CCtx
  MkCCtx : List(Pack(Name CSort)) -- CCtx
end

unCCtx : CCtx -- List(Pack(Name CSort))
unCCtx = match(MkCCtx -> id)

data CSort
  CSTypes : CSort
  CSType : CSort
  CSValues : CTypes -- CSort
  CSValue : CType -- CSort
  CSEffect : CSort
  CSWord : CTypes CTypes CEffect -- CSort
end

data CTypes
  CTsVar : Name -- CTypes
  CTsSym : Symbol CArgs -- CTypes
  CTsNil : CTypes
  CTsCons : CTypes CType -- CTypes
end

data CType
  CTVar : Name -- CType
  CTSym : Symbol CArgs -- CType
end

data CValues
  CVsVar : Name -- CValues
  CVsSym : Symbol CArgs -- CValues
  CVsNil : CValues
  CVsCons : CValues CValue -- CValues
end

data CValue
  CVVar : Name -- CValue
  CVSym : Symbol CArgs -- CValue
end

data CEffect
  CEVar : Name -- CEffect
  CESym : Symbol CArgs -- CEffect
  CENone : CEffect
end

data CWord
  CWVar : Name -- CWord
  CWSym : Symbol CArgs -- CWord
  CWId : CWord
  CWCp : CWord CWord -- CWord
end

data CArgs
  MkCArgs : List(CArg) -- CArgs
end

data CArg
  CATypes : CTypes -- CArg
  CAType : CType -- CArg
  CAValues : CValues -- CArg
  CAValue : CValue -- CArg
  CAEffect : CEffect -- CArg
  CAWord : CWord -- CArg
end

cdef->str : CDef -- Str
cctx->str : CCtx -- Str
csort->str : CSort -- Str
ctypes->str : CType -- Str
ctype->str : CType -- Str
cvalues->str : CValues -- Str
cvalue->str : CValue -- Str
ceffect->str : CEffect -- Str
cword->str : CWord -- Str
cargs->str : CArgs -- Str
carg->str : CArg -- Str

data CCheck
  CCOk : CCheck
  CCErr : Str -- CCheck
end

ccheck(
  f : *a -- *b,
  g : *a Str -- *b
) : *a CCheck -- *b

lookupEnv : CEnv Symbol -- CEnv Maybe(CDef)

lookupCtx : CCtx Name -- CCtx Maybe(CSort)

lookupCtx? : CCtx Name -- CCtx Name Maybe(CSort)
lookupCtx? = dup dip'(lookupCtx)

checkTypes : CEnv CCtx CTypes -- CEnv CCtx CCheck
checkTypesEq : CEnv CCtx CTypes CTypes -- CEnv CCtx CCheck
checkTypesSub : CEnv CCtx CTypes CTypes -- CEnv CCtx CCheck

checkType : CEnv CCtx CType -- CEnv CCtx CCheck
checkTypeEq : CEnv CCtx CType CType -- CEnv CCtx CCheck
checkTypeSub : CEnv CCtx CType CType -- CEnv CCtx CCheck

checkValues : CEnv CCtx CValues CTypes -- CEnv CCtx CCheck
checkValuesEq : CEnv CCtx CValues CValues CTypes -- CEnv CCtx CCheck

checkValue : CEnv CCtx CValue CType -- CEnv CCtx CCheck
checkValueEq : CEnv CCtx CValue CValue CType -- CEnv CCtx CCheck

checkEffect : CEnv CCtx CEffect -- CEnv CCtx CCheck
checkEffectEq : CEnv CCtx CEffect CEffect -- CEnv CCtx CCheck
checkEffectSub : CEnv CCtx CEffect CEffect -- CEnv CCtx CCheck

checkWord : CEnv CCtx CWord CType CType CEffect -- CEnv CCtx CCheck
checkWordEq : CEnv CCtx CWord CWord CType CType CEffect -- CEnv CCtx CCheck
inferWord : CEnv CCtx CType CWord -- CEnv CCtx CType CEffect CCheck

checkArgs : CEnv CCtx CArgs CCtx -- CEnv CCtx CCheck
checkArgsEq : CEnv CCtx CArgs CCtx -- CEnv CCtx CCheck

checkArg : CEnv CCtx CArg CSort -- CEnv CCtx CCheck
checkArgEq : CEnv CCtx CArg CArg CSort -- CEnv CCtx CCheck

undefined : *a -- *b
undefined = "undefined" _prim_unsafe_panic

checkType : CEnv CCtx CType -- CEnv CCtx CCheck
checkType =
  match(
    CTVar ->
      lookupCtx?
      maybe(
        dip("Unknown type variable ") name->str <> CCErr,

        match(
          CSType ->
            drop CCOk,

          _ ->
            dip2("Expected type variable, got ")
            dip(name->str <> " : " <>)
            csort->str <>
            CCErr
        )
      ),

    CTSym ->
      over dip3'''(lookupEnv)
      maybe(
        drop dip("Unknown type constructor ")
        symbol->str <> CCErr,

        unCDef drop match(
          CSType ->
            dip2(drop) checkArgs,

          _ ->
            dip4("Expected type constructor, got ")
            dip2(drop symbol->str <>)
            dip(cctx->str <> " : " <>)
            csort->str <>
            CCErr

        )
      )
  )

checkValue : CEnv CCtx CValue CType -- CEnv CCtx CCheck
checkValue =
  swap match(
    CVVar ->
      swap dip?(lookupCtx?)
      maybe(
        dip2("Unknown data variable ")
        dip(name->str <> " : " <>)
        ctype->str <> CCErr,

        match(
          CSValue ->
            dip2(drop) checkTypeEq,
          _ ->
            drop2 dip("Expected data but variable ") name->str <> " has wrong sort" <> CCErr
        )
      ),

    CVSym ->
      undefined
  )

checkWord : CEnv CCtx CWord CType CType CEffect -- CEnv CCtx CCheck
checkWord =
  dip2(swap inferWord) rotl ccheck(
    undefined,
    dip(drop4) CCErr
  )

inferWord : CEnv CCtx CType CWord -- CEnv CCtx CType CEffect CCheck
inferWord =
  match(
    CWVar ->
      undefined,

    CWSym ->
      undefined,

    CWId ->
      CENone CCOk,

    CWCp ->
      dip(inferWord) swap
      ccheck(
        undefined,
        undefined
      )
  )

checkArg : CEnv CCtx CArg CSort -- CEnv CCtx CCheck
checkArg =
  swap match(
    CATypes ->
      undefined,

    CAType ->
      swap match(
        CSType ->
          checkType,
        _ ->
          undefined
      ),

    CAValues ->
      undefined,

    CAValue ->
      undefined,

    CAEffect ->
      undefined,

    CAWord ->
      undefined
  )

