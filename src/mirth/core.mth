import base/result
import base/map
import base/list
import base/sexp

import mirth/syntax
import mirth/mod
import mirth/loc

export mirth/core
  type L(t)
  type Result(e,v)
  type Sexp

  type CoreError
  type CoreInterface
  type CoreModule
  type CoreEnv
  type CoreCtx
  type CoreSym
  type CoreVar

  coreInterfaceNil : Interface -- CoreInterface
  coreInterface->str : CoreInterface -- Str
  coreInterface->sexp : CoreInterface -- Sexp

  coreModuleNil : Mod -- CoreModule
  coreModule->str : CoreModule -- Str
  coreModule->sexp : CoreModule -- Sexp

  coreEnvNil : CoreEnv
  coreEnv->sexp : CoreEnv -- Sexp

  mkCoreSym : Name -- CoreSym
  unCoreSym : CoreSym -- Name
  coreSym->str : CoreSym -- Str

  mkCoreVar : Name -- CoreVar
  unCoreVar : CoreVar -- Name
  coreVar->str : CoreVar -- Str
end

||| A Core Interface is the core equivalent of an interface,
||| i.e. an export list. These are meant to be self-contained.
||| In practice this is just a wrapper over a CoreEnv that
||| can only contain type signatures and word signatures.
data CoreInterface
  ||| Construct the Core Interface.
  mkCoreInterface : Interface CoreEnv -- CoreInterface
end

||| Destruct the Core Interface.
unCoreInterface : CoreInterface -- Interface CoreEnv
unCoreInterface = match( mkCoreInterface -> id )

||| Empty Core Interface.
coreInterfaceNil = coreEnvNil mkCoreInterface

||| Show the Core interface as a string (via its sexp).
coreInterface->str = coreInterface->sexp sexp->str

||| Serialize a Core Interface into a Sexp.
coreInterface->sexp = $(
  unCoreInterface
  dip2(nil)
  dip2("core-interface" sexpAtom cons)
  dip(interface->str sexpAtom cons)
  coreEnv->sexp cons
  sexpList
)

||| A Core Module is the core equivalent of a module.
data CoreModule
  ||| Construct Core Module
  mkCoreModule : Mod CoreEnv -- CoreModule
end

||| Destruct Core Module
unCoreModule : CoreModule -- Mod CoreEnv
unCoreModule = match( mkCoreModule -> id )

||| Empty Core Module.
coreModuleNil : Mod -- CoreModule
coreModuleNil = coreEnvNil mkCoreModule

||| Show the Core Module as a string (via its sexp).
coreModule->str : CoreModule -- Str
coreModule->str = coreModule->sexp sexp->str

||| Serialize a Core Module into a Sexp.
coreModule->sexp : CoreModule -- Sexp
coreModule->sexp = $(
  unCoreModule
  dip2(nil)
  dip2("core-module" sexpAtom cons)
  dip(mod->str sexpAtom cons)
  coreEnv->sexp cons
  sexpList
)

||| A Core Env is the environment needed to evaluate terms.
||| This is built piece by piece from core declarations,
||| and arranged into a set of coherent bindings.
data CoreEnv
  mkCoreEnv : CoreEnv
end

||| Initial Core Env, devoid of bindings, not even builtins.
coreEnvNil : CoreEnv
coreEnvNil = mkCoreEnv

||| Serialize a Core Env into a Sexp.
coreEnv->sexp : CoreEnv -- Sexp
coreEnv->sexp =
  match( mkCoreEnv ->
    nil
    "core-env" sexpAtom cons
    sexpList
  )

||| A Core Ctx is a context in which to evaluate terms.
||| A context defines kinds for all variables.
data CoreCtx
  mkCoreCtx : CoreCtx
end

||| Serialize a CoreCtx into a Sexp.
coreCtx->sexp : CoreCtx -- Sexp
coreCtx->sexp = drop nil sexpList

||| A symbol for a global binding.
data CoreSym
  ||| Construct CoreSym
  mkCoreSym : Name -- CoreSym
end

||| Destruct CoreSym
unCoreSym : CoreSym -- Name
unCoreSym = match( mkCoreSym -> id )

||| Show the symbol as a string.
coreSym->str : CoreSym -- Str
coreSym->str = unCoreSym name->str

||| A variable for a local binding.
data CoreVar
  ||| Construct CoreVar
  mkCoreVar : Name -- CoreVar
end

||| Destruct CoreVar
unCoreVar : CoreVar -- Name
unCoreVar = match( mkCoreVar -> id )

||| Show the variable as a string.
coreVar->str : CoreVar -- Str
coreVar->str = unCoreVar name->str

