
import base/nat
import base/str
import base/list
import base/unsafe
import base/io
import mirth/syntax
import mirth/loc

type +Mirth
type K
type W

data K
  KVar  : Name -- K
  KVoid : K
  KUnit : K
  KBool : K
  KInt  : K
  KStr  : K
  KPair : K K -- K
  KList : K   -- K
  KWord : K K -- K
end

k->str  : K -- Str
k->str* : K -- Str

k->str =
  match(
    KVar -> name->str,
    KUnit -> "[]",
    KVoid -> "Void",
    KBool -> "Bool",
    KInt -> "Int",
    KStr -> "Str",
    KList -> k->str dip("List(") <> ")" <>,
    KPair -> dip(k->str*) k->str <> dip("[") <> "]" <>,
    KWord ->
      dip2("[ ") dip(k->str* <> "-- " <>)
      k->str* <> "]" <>
  )

k->str* =
  match(
    KUnit -> "",
    KPair -> dip(k->str*) k->str " " <> <>,
    _ -> dip("*") k->str <> " " <>
  )

data W
  WVar (t: K -- K +Mirth) : Name -- W
  WId   : W
  WCp   : List(W) -- W

  WDup  : W
  WDrop : W
  WSwap : W
  WDip  : W -- W

  WPack2 : W
  WUnpack2 : W
  WIntuple : W -- W

  WBoolTrue : W
  WBoolFalse : W
  WBoolIf : W W -- W

  WIntAdd : W
  WIntSub : W
  WIntMul : W
  WIntMod : W
  WIntDiv : W
  WIntEq  : W
  WIntLt  : W

  WStrCat : W
  WStrBreak : W
  WStrLen : W
  WStrFromCodepoint : W
  WStrToCodepoint : W
  WStrElem : W
  WStrREMatch : W

  WListNil : K -- W
  WListCons : W
  WListCat : W
  WListLen : W
  WListAt : W
  WListBreak : W
  WListMap : W -- W
  WListFor : W -- W

  WUnsafePanic : W
  WUnsafeTrace : W
  WUnsafePrint : W
  WUnsafeListDir : W
  WUnsafeWalk : W
  WUnsafeIsDir : W
  WUnsafeIsFile : W
  WUnsafeRead : W
  WUnsafeWrite : W
  WUnsafeAppend : W
  WUnsafeCoerce : W
  WUnsafeHash : W
  WUnsafeEnvGet : W
  WUnsafeEnvSet : W
  WUnsafeEnvSave : W -- W
  WUnsafeExit : W
end

initMirth : +Mirth
initMirth = n0 unsafe_env_set("Mirth.fresh")

runMirth(f: *a -- *b +Mirth) : *a -- *b +IO
runMirth(f) =
  unsafe_env_save("Mirth.fresh", initMirth f) unsafe_coerce

freshName : Name +Mirth
freshName = $(
  unsafe_env_get("Mirth.fresh")
  n1+ pnat dup unsafe_env_set("Mirth.fresh")
  nat->str dip("?") <> mkName
)

typeError : *a Str -- *b +Mirth
typeError = "Type Error: " swap <> unsafe_panic

infer : K W -- K +Mirth
infer =
  match(
    WVar(inferVar) -> drop inferVar,
    WId -> id,
    WCp -> for(infer),

    WDup ->
      match(
        KPair -> dup dip(KPair) KPair,
        _ -> "dup: Expected item on stack but got something else." typeError
      ),

    WDrop ->
      match(
        KPair -> drop,
        _ -> "drop: Expected item on stack but got something else." typeError
      ),

    _ -> "not yet implemented" typeError
  )

