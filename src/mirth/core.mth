# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

import base/maybe
import base/nat

||| Type of globals. These are unique descriptions of a word / type / etc.
||| These are unique accross all modules and packages. Note that a particular
||| word / type may not have the same global in differently versioned packages.
data Global
  MkGlobal : Global
end

||| Control whether an argument is usually passed implicitly or explicitly.
data Visibility
  Implicit : Visibility
  Explicit : Visibility
end

||| Syntactic Kind
data Kind
  KStackType : Kind
  KStack : Kind
  KValueType : Kind
  KValue : Kind
  KWord : Kind
  KLambda : Kind Kind -- Kind
end

kindeq : Kind Kind -- Bool
kindeq =
  match(
    KStackType ->
      match(
        KStackType -> true,
        _ -> drop false
      ),
    KStack ->
      match(
        KStack -> true,
        _ -> drop false
      ),
    KValueType ->
      match(
        KValueType -> true,
        _ -> drop false
      ),
    KValue ->
      match(
        KValue -> true,
        _ -> drop false
      ),
    KWord ->
      match(
        KWord -> true,
        _ -> drop false
      ),
    KLambda ->
      rotl match(
        KLambda -> dip(swap) dip2(kindeq) kindeq and,
        _ -> drop3 false
      )
  )

kapply : Kind Kind -- Maybe(Kind)
kapply =
  swap match(
    KLambda ->
      dip(kindeq) swap if(
        some,
        drop none
      ),
    _ -> drop2 none
  )

||| Primitives i.e. Mirth built-ins
data Prim
  PSTNil : Prim
  PSTCons : Prim
  PSNil : Prim
  PSCons : Prim
  PVTInt : Prim
  PVTStr : Prim
  PVTList : Prim
  PVInt : Int -- Prim
  PVStr : Str -- Prim
  PVNil : Prim
  PVCons : Prim
  PWDup : Prim
  PWDrop : Prim
  PWSwap : Prim
  PWDip : Prim
  PWWeak : Nat -- Prim
end

||| Syntactic kind for each primitive.
primKind : Prim -- Kind
primKind =
  match(
    PSTNil -> KStackType,
    PSTCons -> KStackType KValueType KStackType KLambda KLambda,
    PSNil -> KStack,
    PSCons -> KStack KValue KStack KLambda KLambda,
    PVTInt -> KValueType,
    PVTStr -> KValueType,
    PVTList -> KValueType KValueType KLambda,
    PVInt -> drop KValue,
    PVStr -> drop KValue,
    PVNil -> KValue,
    PVCons -> KValue KValue KValue KLambda KLambda,
    PWDup  -> KWord,
    PWDrop -> KWord,
    PWSwap -> KWord,
    PWDip  -> KWord KWord KLambda,
    PWWeak -> drop KWord KWord KLambda
  )

||| Terms.
data Term(x)
  TLocal : x -- Term(x)
  TGlobal : Global -- Term(x)
  TPrim : Prim -- Term(x)
  TLambda : Term(Maybe(x)) -- Term(x)
  TApply : Term(x) Term(x) -- Term(x)
end

rename(f: *ctx a -- *ctx b) : *ctx Term(a) -- *ctx Term(b)
rename(f) =
  match(
    TLocal -> f TLocal,
    TGlobal -> TGlobal,
    TPrim -> TPrim,
    TLambda -> rename(maybe(none, f some)) TLambda,
    TApply -> dip(rename(f)) dip'(rename(f)) TApply
  )

subst(f: *ctx a -- *ctx Term(b)) : *ctx Term(a) -- *ctx Term(b)
subst(f) =
  match(
    TLocal -> f,
    TGlobal -> TGlobal,
    TPrim -> TPrim,
    TLambda -> subst(maybe(none TLocal, f rename(some))) TLambda,
    TApply -> dip(subst(f)) dip'(subst(f)) TApply
  )

