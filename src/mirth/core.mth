
import base/nat
import base/str
import base/map
import base/set
import base/list
import base/unsafe
import base/maybe
import base/io
import mirth/syntax
import mirth/loc

type +Mirth
type K
type W

data Meta
  MkMeta : Nat Maybe(Name) -- Meta
end

unMeta : Meta -- Nat Maybe(Name)
unMeta = match( MkMeta -> id )

meta->str : Meta -- Str
meta->str = dip("[:") unMeta dip(nat->str <>) maybe(id, dip(":" <>) name->str <>) ":]" <>

metaeq : Meta Meta -- Bool
metaeq = both(meta->str) streq

data K
  KVar  : Name -- K
  KMeta : Meta -- K
  KVoid : K
  KUnit : K
  KBool : K
  KInt  : K
  KStr  : K
  KPair : K K -- K
  KList : K   -- K
  KWord : K K -- K
end

k->str  : K -- Str
k->str* : K -- Str

k->str =
  match(
    KVar -> name->str,
    KMeta -> meta->str,
    KUnit -> "[]",
    KVoid -> "Void",
    KBool -> "Bool",
    KInt -> "Int",
    KStr -> "Str",
    KList -> k->str dip("List(") <> ")" <>,
    KPair -> dip(k->str*) k->str <> dip("[") <> "]" <>,
    KWord ->
      dip2("[ ") dip(k->str* <> "-- " <>)
      k->str* <> "]" <>
  )

k->str* =
  match(
    KUnit -> "",
    KPair -> dip(k->str*) k->str " " <> <>,
    _ -> dip("*") k->str <> " " <>
  )

data W
  WVar (t: K -- K +Mirth) : Name -- W
  WId   : W
  WCp   : List(W) -- W

  WDup  : W
  WDrop : W
  WSwap : W
  WDip  : W -- W

  WPack2 : W
  WUnpack2 : W
  WIntuple : W -- W

  WBoolTrue : W
  WBoolFalse : W
  WBoolIf : W W -- W

  WIntAdd : W
  WIntSub : W
  WIntMul : W
  WIntMod : W
  WIntDiv : W
  WIntEq  : W
  WIntLt  : W

  WStrCat : W
  WStrBreak : W
  WStrLen : W
  WStrFromCodepoint : W
  WStrToCodepoint : W
  WStrElem : W
  WStrREMatch : W

  WListNil : K -- W
  WListCons : W
  WListCat : W
  WListLen : W
  WListAt : W
  WListBreak : W
  WListMap : W -- W
  WListFor : W -- W

  WUnsafePanic : K -- W
  WUnsafeTrace : W
  WUnsafePrint : W
  WUnsafeListDir : W
  WUnsafeWalk : W
  WUnsafeIsDir : W
  WUnsafeIsFile : W
  WUnsafeRead : W
  WUnsafeWrite : W
  WUnsafeAppend : W
  WUnsafeCoerce : K -- W
  WUnsafeHash : W
  WUnsafeEnvGet : K -- W
  WUnsafeEnvSet : W
  WUnsafeEnvSave : W -- W
  WUnsafeExit : K -- W
end

MIRTH_FRESH : Str
MIRTH_KMETA : Str
MIRTH_FRESH = "Mirth.fresh"
MIRTH_KMETA = "Mirth.kmeta"

initMirth : +Mirth
initMirth = $(
  n0 unsafe_env_set(MIRTH_FRESH)
  mapNil unsafe_env_set(MIRTH_KMETA)
)

runMirth(f: *a -- *b +Mirth) : *a -- *b +IO
runMirth(f) = $(
  unsafe_env_save(MIRTH_FRESH,
  unsafe_env_save(MIRTH_KMETA,
    initMirth f
  ))
  unsafe_coerce
)

typeError : *a Str -- *b +Mirth
typeError = "Type Error: " swap <> unsafe_panic

freshNat : Nat +Mirth
freshNat = $(
  unsafe_env_get(MIRTH_FRESH)
  n1+ pnat dup
  unsafe_env_set(MIRTH_FRESH)
)

kmetaget : Meta -- Maybe(K) +Mirth
kmetaget = unsafe_env_get(MIRTH_KMETA) swap mapGet

kmetaset : Meta K -- +Mirth
kmetaset = unsafe_env_get(MIRTH_KMETA) rotr mapSet unsafe_env_set(MIRTH_KMETA)

kexpand : K -- K +Mirth
kexpand =
  match(
    KMeta -> dup kmetaget maybe(KMeta, nip kexpand),
    _ -> id
  )

khasmeta? : Meta K -- Meta K Bool +Mirth
khasmeta  : Meta K --        Bool +Mirth
khasmeta =
  match(
    KMeta -> metaeq,
    KList -> khasmeta,
    KPair -> or?(dip?(khasmeta?), swap?(dip?(khasmeta?))) dip(drop3),
    KWord -> or?(dip?(khasmeta?), swap?(dip?(khasmeta?))) dip(drop3),
    _ -> drop2 false
  )
khasmeta? = dup2 khasmeta

kmetamatch2 : Meta Meta -- K +Mirth
kmetamatch1 : Meta K -- K +Mirth
kmetamatch(fallback: K K -- K +Mirth) : K K -- K +Mirth
kmetamatch(fallback) =
  match(
    KMeta ->
      swap match(
        KMeta -> kmetamatch2,
        _ -> kmetamatch1
      ),
    _ ->
      swap match(
        KMeta -> swap kmetamatch1,
        _ -> fallback
      )
  )

kmetamatch2 =
  dup2 metaeq if(
    drop KMeta,
    KMeta dup dip(kmetaset)
  )

kmetamatch1 =
  dup2 khasmeta if(
    dip2("Can't unify ")
    dip(meta->str <> " with " <>)
    k->str <>
    typeError,
    dup dip(kmetaset)
  )

~KVar  : K -- Name +Mirth
~KMeta : K -- Meta +Mirth
~KVoid : K -- +Mirth
~KUnit : K -- +Mirth
~KBool : K -- +Mirth
~KInt  : K -- +Mirth
~KStr  : K -- +Mirth
~KPair : K -- K K +Mirth
~KList : K -- K +Mirth
~KWord : K -- K K +Mirth

~KVar  = kexpand match( KVar  -> id, _ -> "Expected type var." typeError)
~KMeta = kexpand match( KMeta -> id, _ -> "Expected meta var." typeError)
~KVoid = kexpand match( KVoid -> id, _ -> "Expected Void." typeError)
~KUnit = kexpand match( KVoid -> id, _ -> "Expected []." typeError)
~KBool = kexpand match( KBool -> id, _ -> "Expected Bool." typeError)
~KInt  = kexpand match( KInt  -> id, _ -> "Expected Int." typeError)
~KStr  = kexpand match( KStr  -> id, _ -> "Expected Str." typeError)
~KPair = kexpand match( KPair -> id, _ -> "Expected stack item." typeError)
~KList = kexpand match( KList -> id, _ -> "Expected List." typeError)
~KWord = kexpand match( KWord -> id, _ -> "Expected word type." typeError)

kmatch : K K -- K +Mirth
kmatch2 : K K K K -- K K +Mirth

kmatch =
  dip(kexpand) kexpand kmetamatch(match(
    KVar -> dip(~KVar) over nameeq
      if(KVar, "mismatched type vars" typeError),
    KMeta -> dip(~KMeta) over metaeq
      if(KMeta, "mismatched meta vars" typeError),
    KVoid -> ~KVoid KVoid,
    KUnit -> ~KUnit KUnit,
    KBool -> ~KBool KBool,
    KInt  -> ~KInt  KInt,
    KStr  -> ~KStr  KStr,
    KPair -> dip2(~KPair) kmatch2 KPair,
    KList -> dip(~KList) kmatch KList,
    KWord -> dip2(~KWord) kmatch2 KWord
  ))

kmatch2 = dip(swap) dip2(kmatch) kmatch

kpop : K -- K K +Mirth
kpop = ~KPair

kpop2 : K -- K K K +Mirth
kpop2 = kpop dip(kpop)

kpush : K K -- K
kpush = KPair

kpush2 : K K K -- K
kpush2 = dip(kpush) kpush

infer : K W -- K +Mirth
infer =
  match(
    WVar(inferVar) -> drop inferVar,
    WId -> id,
    WCp -> for(infer),

    WDup -> kpop dup kpush2,
    WDrop -> kpop drop,
    WSwap -> kpop2 swap kpush2,
    WDip -> dip(kpop) swap dip(infer) kpush,

    WPack2 -> kpop2 kpush kpush,
    WUnpack2 -> kpop kpop kpush2,
    WIntuple -> dip(kpop) infer kpush,

    WBoolTrue -> KBool kpush,
    WBoolFalse -> KBool kpush,
    WBoolIf ->
      dip2(kpop ~KBool) dip(over)
      dip2(infer) infer kmatch,

    WIntAdd -> kpop2 ~KInt ~KInt KInt kpush,
    WIntSub -> kpop2 ~KInt ~KInt KInt kpush,
    WIntMul -> kpop2 ~KInt ~KInt KInt kpush,
    WIntMod -> kpop2 ~KInt ~KInt KInt kpush,
    WIntDiv -> kpop2 ~KInt ~KInt KInt kpush,
    WIntEq -> kpop2 ~KInt ~KInt KBool kpush,
    WIntLt -> kpop2 ~KInt ~KInt KBool kpush,

    WStrCat -> kpop2 ~KStr ~KStr KStr kpush,
    WStrBreak -> kpop2 ~KInt ~KStr KStr KStr kpush2,
    WStrLen -> kpop ~KStr KInt kpush,
    WStrFromCodepoint -> kpop ~KInt KStr kpush,
    WStrToCodepoint -> kpop ~KStr KInt kpush,
    WStrElem -> kpop2 ~KStr ~KStr KBool kpush,
    WStrREMatch -> kpop2 ~KStr ~KStr KInt KBool kpush2,

    WListNil -> KList kpush,
    WListCons -> kpop2 dip(~KList) kmatch KList kpush,
    WListCat -> kpop2 dip(~KList) ~KList kmatch KList kpush,
    WListLen -> kpop ~KList drop KInt kpush,
    WListAt -> kpop2 ~KInt ~KList kpush,
    WListBreak -> kpop2 ~KInt ~KList KList dup kpush2,
    WListMap ->
      dip(kpop ~KList dip(KUnit) KPair) infer
      ~KPair dip(~KUnit) KList kpush,
    WListFor ->
      dip(kpop ~KList kpush) infer kpop KList kpush,

    WUnsafePanic -> dip(kpop ~KStr drop),
    WUnsafeTrace -> kpop ~KStr,
    WUnsafePrint -> kpop ~KStr,
    WUnsafeListDir -> kpop ~KStr KStr KList kpush,
    WUnsafeWalk -> kpop ~KStr KUnit KStr kpush KStr KList dup kpush2 kpush,
    WUnsafeIsDir -> kpop ~KStr KBool kpush,
    WUnsafeIsFile -> kpop ~KStr KBool kpush,
    WUnsafeRead -> kpop ~KStr KStr kpush,
    WUnsafeWrite -> kpop2 ~KStr ~KStr,
    WUnsafeAppend -> kpop2 ~KStr ~KStr,
    WUnsafeCoerce -> nip,
    WUnsafeHash -> kpop drop KInt kpush,
    WUnsafeEnvGet -> dip(kpop ~KStr) kpush,
    WUnsafeEnvSet -> kpop2 ~KStr drop,
    WUnsafeEnvSave -> dip(kpop ~KStr) infer,
    WUnsafeExit -> dip(kpop ~KInt drop)
  )


