import base/result
import base/map
import mirth/mod
import mirth/loc

export mirth/core
  type L(t)
  type Result(e,v)

  type CoreError
  type CoreModule
  type CoreStmt
  type CoreCtx
  type CoreSym

  coreNil  : Mod -- CoreModule
  coreCons : CoreModule L(CoreStmt) -- Result(CoreError, CoreModule)

  stmtTypeSig : CoreSym CoreCtx -- CoreStmt
end

data CoreStmt
  stmtTypeSig : CoreSym CoreCtx -- CoreStmt
end

data CoreDef
  defTypeSig : LocSet CoreCtx -- CoreDef
end

stmt->def : L(CoreStmt) -- CoreSym CoreDef
stmt->def =
  unL match(
    stmtTypeSig ->
      dip(swap) defTypeSig
  )

defCheck : CoreModule CoreSym Maybe(CoreDef) CoreDef -- Result(CoreError, CoreDef)
defCheck = dip(drop3) ok

data CoreModule
  mkCore : Mod Map(CoreSym, CoreDef) -- CoreModule
end

unCore : CoreModule -- Mod Map(CoreSym, CoreDef)
unCore = match( mkCore -> id )

coreGet? : CoreModule CoreSym -- CoreModule CoreSym Maybe(CoreDef)
coreGet? = dip(unCore) mapGet? dip2(mkCore)

coreSet : CoreModule CoreSym CoreDef -- CoreModule
coreSet = dip2(unCore) mapSet mkCore

coreNil = mapNil mkCore
coreCons = $(
  stmt->def
  dip(coreGet?) dip2(dup2)
  defCheck result(
    dip(drop2) err,
    coreSet ok
  )
)

