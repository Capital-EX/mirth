
import base/result
import base/maybe
import base/int
import base/map
import base/str

import mirth/syntax
import mirth/loc
import mirth/core

export mirth/elab
  type EEnv
  type EDef
  type ECtx
end

data EError
  MkEError : L(Str) -- EError
end

data EResult(t)
  MkEResult : Result(EError, t) -- EResult(t)
end

data EEnv
  MkEEnv : CEnv Map(Name, EDef) -- EEnv
end

data EDef
end

data InferImplicits
  MkInferImplicits : Bool -- InferImplicits
end

unInferImplicits : InferImplicits -- Bool
unInferImplicits = match(MkInferImplicits -> id)

data ECtx
  MkECtx : CCtx Int InferImplicits -- ECtx
end

unECtx : ECtx -- CCtx Int InferImplicits
unECtx = match(MkECtx -> id)

freshInt : ECtx -- ECtx Int
freshInt = unECtx over dip2(z1+) dip(MkECtx)

freshName : ECtx -- ECtx Name
freshName = freshInt dip("?") int->str <> mkName

# freshType : ECtx -- ECtx CType
# freshType = freshName CTVar

