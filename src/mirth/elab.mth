
import base/unit
import base/maybe
import base/result
import base/list
import base/str
import base/int
import base/nat
import base/sexp
import base/map
import mirth/loc
import mirth/syntax

export mirth/elab
  type Result(a,b)
  type EEnv
  type EError
  type EMonad(t)

  emRun : EEnv EMonad(t) -- EEnv Result(EError,t)
  emFail : Str -- EMonad(a)
  emPure : a -- EMonad(a)
  emPure2 : a b -- EMonad(a) EMonad(b)
  emPure3 : a b c -- EMonad(a) EMonad(b) EMonad(c)
  emMap(f: a -- b) : EMonad(a) -- EMonad(b)
  emMap2(f: a b -- c) : EMonad(a) EMonad(b) -- EMonad(c)
  emMap3(f: a b c -- d) : EMonad(a) EMonad(b) EMonad(c) -- EMonad(d)
  emMap4(f: a b c d -- e) : EMonad(a) EMonad(b) EMonad(c) EMonad(d) -- EMonad(e)
  emBind(f: a -- EMonad(b)) : EMonad(a) -- EMonad(b)
  emBind2(f: a b -- EMonad(c)) : EMonad(a) EMonad(b) -- EMonad(c)
  emBind3(f: a b c -- EMonad(d)) : EMonad(a) EMonad(b) EMonad(c) -- EMonad(d)
  emBind4(f: a b c d -- EMonad(e)) : EMonad(a) EMonad(b) EMonad(c) EMonad(d) -- EMonad(e)

  type EModule

  eeInitial : EEnv
  runElabModule : L(Module) -- Result(EError, EModule)
  eerror->str : EError -- Str
  emodule->str : EModule -- Str

end

||| Elaborator error.
data EError
  MkEError : Str -- EError
end

unEError : EError -- Str
unEError = match(MkEError -> id)

eerror->str : EError -- Str
eerror->str = unEError

||| Elaboration monad.
data EMonad(t)
  MkEMonad(f: EEnv m -- EEnv Result(EError, t)) : m -- EMonad(t)
end

emUse(f: EEnv a -- EEnv b) : a -- EMonad(b)
emUse(f) = MkEMonad(f ok)

emGet(f: EEnv -- EEnv b) : EMonad(b)
emGet(f) = unit emUse(drop f)

emPut(f: EEnv t -- EEnv) : t -- EMonad(Unit)
emPut(f) = emUse(f unit)

emRun : EEnv EMonad(t) -- EEnv Result(EError, t)
emRun = match(MkEMonad(f) -> f)

emPure : a -- EMonad(a)
emPure = MkEMonad(ok)

emFail : Str -- EMonad(a)
emFail = MkEMonad(MkEError err)

emPure2 : a b -- EMonad(a) EMonad(b)
emPure2 = dip(emPure) emPure

emPure3 : a b c -- EMonad(a) EMonad(b) EMonad(c)
emPure3 = dip(emPure2) emPure

emMap(f: a -- b) : EMonad(a) -- EMonad(b)
emMap(f) = MkEMonad(emRun rmap(f))

emMap2(f: a b -- c) : EMonad(a) EMonad(b) -- EMonad(c)
emMap2(f) =
  pack2 MkEMonad(
    unpack2 dip(emRun) swap
    result(nip err,
      dip(emRun) swap
      result(nip err, f ok)
    )
  )

emMap3(f: a b c -- d) : EMonad(a) EMonad(b) EMonad(c) -- EMonad(d)
emMap3(f) = emMap2(pack2) emMap2(unpack2 f)

emMap4(f: a b c d -- e) : EMonad(a) EMonad(b) EMonad(c) EMonad(d) -- EMonad(e)
emMap4(f) = emMap2(pack2) emMap3(unpack2 f)

emBind(f: a -- EMonad(b)) : EMonad(a) -- EMonad(b)
emBind(f) = MkEMonad(emRun result(err, f emRun))

emBind2(f: a b -- EMonad(c)) : EMonad(a) EMonad(b) -- EMonad(c)
emBind2(f) = emMap2(pack2) emBind(unpack2 f)

emBind3(f: a b c -- EMonad(d)) : EMonad(a) EMonad(b) EMonad(c) -- EMonad(d)
emBind3(f) = emMap3(pack3) emBind(unpack3 f)

emBind4(f: a b c d -- EMonad(e)) : EMonad(a) EMonad(b) EMonad(c) EMonad(d) -- EMonad(e)
emBind4(f) = emMap4(pack4) emBind(unpack4 f)

###############
# Elaboration #
###############

||| Elaboration World -- The collection of loaded packages and modules.
data EWorld
  MkEWorld : EWorld
end

||| Elaboration Context -- Necessary information for the current elaboration,
||| such as the type of local variables and the mappings of names to symbols
||| and metavariables to expansions.
data ECtx
  MkECtx : ECtx
end

||| Elaboration Environment
data EEnv
  MkEEnv : EWorld ECtx Nat -- EEnv
end

unEEnv : EEnv -- EWorld ECtx Nat
unEEnv = match(MkEEnv -> id)

eeInitial : EEnv
eeInitial = MkEWorld MkECtx n0 MkEEnv

eeFreshNat : EEnv -- EEnv Nat
eeFreshNat = unEEnv n1+ pnat dup dip(MkEEnv)

emFreshNat : EMonad(Nat)
emFreshNat = emGet(eeFreshNat)

eeUseWorld(f: EWorld a -- EWorld b) : EEnv a -- EEnv b
eeUseWorld(f) = dip(unEEnv) dip2''(f) dip(MkEEnv)

eeUseCtx(f: ECtx a -- ECtx b) : EEnv a -- EEnv b
eeUseCtx(f) = dip(unEEnv) dip'(f) dip(MkEEnv)

emFor(f: a b -- EMonad(a)) : a List(b) -- EMonad(a)
emFor(f) = lmatchL(emPure, dip(f) emPure emBind2(emFor(f)))

emForB(f: a b -- EMonad(a)) : EMonad(a) List(b) -- EMonad(a)
emForB(f) = emPure emBind2(emFor(f))

emList(f: a -- EMonad(b)) : List(a) -- EMonad(List(b))
emList(f) = dip(nil) emFor(dip(emPure) f emMap2(consR))

emUpdateMap(f: Maybe(v) a -- EMonad(v)) : Map(k,v) k a -- EMonad(Map(k,v))
emUpdateMap(f) = dip(mapGet? dip(emPure2)) f emMap3(mapSet)

elabL(f: a -- EMonad(b)) : L(a) -- EMonad(b)
elabL(f) = getL f # TODO: Keep track of current location within EEnv.

elabL2(f: a b -- EMonad(c)) : a L(b) -- EMonad(c)
elabL2(f) = unL dip(swap) pack2 mkL elabL(unpack2 f)

elabL3(f: a b c -- EMonad(d)) : a b L(c) -- EMonad(d)
elabL3(f) = unL dip(rotr) pack3 mkL elabL(unpack3 f)

data EDefType
end

data EDef
  EDType : EDef
  EDWord : EDef
end

edef->sexp : EDef -- Sexp
edef->sexp = match(
  EDType -> "def-type" sexpAtom,
  EDWord -> "def-word" sexpAtom
)

data EModule
  MkEModule : Map(Name, EDef) -- EModule
end

unEModule : EModule -- Map(Name, EDef)
unEModule = match(MkEModule -> id)

initialEModule : EModule
initialEModule = mapNil MkEModule

emodule->sexp : EModule -- Sexp
emodule->sexp = $(
  unEModule
  dip("module" sexpAtom lpure)
  map->sexp(name->sexp, edef->sexp) cons
  sexpList
)

emodule->str : EModule -- Str
emodule->str = emodule->sexp sexp->str

emUpdateDef(f: Maybe(EDef) x -- EMonad(EDef)) : EModule Name x -- EMonad(EModule)
emUpdateDef(f) =
  dip2(unEModule) emUpdateMap(f) emMap(MkEModule)

elabLModule : L(Module) -- EMonad(EModule)
elabLImport : EModule L(Import) -- EMonad(EModule)
elabLExport : EModule L(Export) -- EMonad(EModule)
elabLSig : EModule L(Sig) -- EMonad(EModule)
elabLDecl : EModule L(Decl) -- EMonad(EModule)
elabLTypeSig : EModule L(TypeSig) -- EMonad(EModule)
elabLDataDef : EModule L(DataDef) -- EMonad(EModule)
elabLWordSig : EModule L(WordSig) -- EMonad(EModule)
elabLWordDef : EModule L(WordDef) -- EMonad(EModule)
elabLAssertion : EModule L(Assertion) -- EMonad(EModule)

elabModule : Module -- EMonad(EModule)
elabImport : EModule Import -- EMonad(EModule)
elabExport : EModule Export -- EMonad(EModule)
elabSig : EModule Sig -- EMonad(EModule)
elabDecl : EModule Decl -- EMonad(EModule)
elabTypeSig : EModule TypeSig -- EMonad(EModule)
elabDataDef : EModule DataDef -- EMonad(EModule)
elabWordSig : EModule WordSig -- EMonad(EModule)
elabWordDef : EModule WordDef -- EMonad(EModule)
elabAssertion : EModule Assertion -- EMonad(EModule)

elabTypeSig@EDef : Maybe(EDef) TypeSig -- EMonad(EDef)
elabDataDef@EDef : Maybe(EDef) DataDef -- EMonad(EDef)
elabWordSig@EDef : Maybe(EDef) WordSig -- EMonad(EDef)
elabWordDef@EDef : Maybe(EDef) WordDef -- EMonad(EDef)

elabLModule = elabL(elabModule)
elabLDecl = elabL2(elabDecl)
elabLSig = elabL2(elabSig)
elabLTypeSig = elabL2(elabTypeSig)
elabLDataDef = elabL2(elabDataDef)
elabLWordSig = elabL2(elabWordSig)
elabLWordDef = elabL2(elabWordDef)
elabLAssertion = elabL2(elabAssertion)

elabModule = $(
  dip(initialEModule) unModule
  dip2(getL emFor(elabLImport))
  dip(getL emForB(elabLExport))
  getL emForB(elabLDecl)
)

elabImport = drop emPure
elabExport = drop emPure

elabDecl =
  matchDecl(
    elabLTypeSig,
    elabLDataDef,
    elabLWordSig,
    elabLWordDef,
    elabLAssertion
  )

elabSig =
  matchSig(
    elabLTypeSig,
    elabLWordSig,
    elabLAssertion
  )

elabTypeSig = dup dip(typeSigName getL) emUpdateDef(elabTypeSig@EDef)
elabDataDef = dup dip(dataDefName getL) emUpdateDef(elabDataDef@EDef) # TODO add the word defs of constructors as well
elabWordSig = dup dip(wordSigName getL) emUpdateDef(elabWordSig@EDef)
elabWordDef = dup dip(wordDefName getL) emUpdateDef(elabWordDef@EDef)
elabAssertion = drop emPure

elabTypeSig@EDef = drop2 EDType emPure
elabDataDef@EDef = drop2 EDType emPure
elabWordSig@EDef = drop2 EDWord emPure
elabWordDef@EDef = drop2 EDWord emPure


runElabModule : L(Module) -- Result(EError, EModule)
runElabModule = dip(eeInitial) elabLModule emRun nip

