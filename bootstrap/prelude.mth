
#
# basic words
#

dup drop == id
dup swap == dup
swap swap == id

nip  : a b -- b
tuck : a b -- b a b
over : a b -- a b a
nip  = dip(drop)
tuck = dup dip(swap)
over = dip(dup) swap
nip drop == drop drop
swap nip == drop
tuck drop == swap
tuck nip == nip dup
over nip == drop dup

rotr : a b c -- c a b
rotl : a b c -- b c a
rotr = swap dip(swap)
rotl = dip(swap) swap
rotl rotr == id
rotr rotl == id
rotl rotl == rotr
rotr rotr == rotl

hide(f : *a b -- *c d) : *a x b -- *c x d
hide(f) = swap dip(f) swap


#
# words over pairs
#

dup2  : a1 a2 -- a1 a2 a1 a2
drop2 : a1 a2 --
swap2 : a1 a2 b1 b2 -- b1 b2 a1 a2
dip2(f : *a -- *b) : *a x y -- *b x y

dup2  = over over
drop2 = drop drop
swap2 = dip(rotr) rotr
dip2(f) = dip(dip(f))

dup2 drop2 == id
dup2 swap2 == dup2
swap2 swap2 == id

nip2  : a1 a2 b1 b2 -- b1 b2
tuck2 : a1 a2 b1 b2 -- b1 b2 a1 a2 b1 b2
over2 : a1 a2 b1 b2 -- a1 a2 b1 b2 a1 a2
nip2  = dip2(drop2)
tuck2 = dup2 dip2(swap2)
over2 = dip2(dup2) swap2

hide2(f : *a b1 b2 -- *c d1 d2) : *a x1 x2 b1 b2 -- *c x1 x2 d1 d2
hide2(f) = swap2 dip2(f) swap2

#
# words over triples
#

dup3  : a1 a2 a3 -- a1 a2 a3 a1 a2 a3
drop3 : a1 a2 a3 --
dip3(f : *a -- *b) : *a x y z -- *b x y z

dup3 = dip(dup2) dup dip(rotr)
drop3 = drop2 drop
dip3(f) = dip(dip(dip(f)))

dup3 drop3 == id


#
# query words
#

swap?(f : *a c b -- *a c b p) : *a b c -- *a b c p
swap?(f) = swap f dip(swap)

dip?(f : *a -- *a p) : *a b -- *a b p
dip?(f) = dip(f) swap

dip2?(f : *a -- *a p) : *a b1 b2 -- *a b1 b2 p
dip2?(f) = dip?(dip?(f))

dip3?(f : *a -- *a p) : *a b1 b2 b3 -- *a b1 b2 b3 p
dip3?(f) = dip2?(dip?(f))

hide?(f : *a b -- *a b p) : *a x b -- *a x b p
hide?(f) = swap dip?(f) dip(swap)

#
# bool
#

and : Bool Bool -- Bool
and = if(id, drop false)

true true and == true
true false and == false
false true and == false
false false and == false
true and == id
swap and == and
dup and and == and
and and == dip(and) and

or : Bool Bool -- Bool
or = if(drop true, id)

true true or == true
true false or == true
false true or == true
false false or == false
false or == id
swap or == or
dup or or == or
or or == dip(or) or

not : Bool -- Bool
not = if(false, true)

not not == id
and not == dip(not) not or
or not == dip(not) not and

xor : Bool Bool -- Bool
xor = if(not, id)

true true xor == false
true false xor == true
false true xor == true
false false xor == false

false xor == id
xor xor == dip(xor) xor
xor not == not xor
swap xor == xor

while(f : *a -- *a Bool, g : *a -- *a) : *a -- *a
while(f,g) = f if(g while(f,g), )

and? (f : *a -- *a Bool, g : *a -- *a Bool) : *a -- *a Bool
or?  (f : *a -- *a Bool, g : *a -- *a Bool) : *a -- *a Bool
xor? (f : *a -- *a Bool, g : *a -- *a Bool) : *a -- *a Bool
and? (f, g) = f if(g, false)
or?  (f, g) = f if(true, g)
xor? (f, g) = f if(g not, g)

and? (true, true) == true
and? (true, false) == false
and? (false, true) == false
and? (false, false) == false

or? (true, true) == true
or? (true, false) == true
or? (false, true) == true
or? (false, false) == false

implies? (f : *a -- *a Bool, g : *a -- *a Bool) : *a -- *a Bool
implies? (f, g) = or? (f not, g)

implies? (true, true) == true
implies? (true, false) == false
implies? (false, true) == true
implies? (false, false) == true

iff? (f : *a -- *a Bool, g : *a -- *a Bool) : *a -- *a Bool
iff? (f, g) = xor? (f, g) not

iff? (true, true) == true
iff? (true, false) == false
iff? (false, true) == false
iff? (false, false) == true

#
# comparison data type
#

data Comparison
  LT : Comparison
  EQ : Comparison
  GT : Comparison
end

compareWith? (lt?: a a -- a a Bool) : a a -- a a Comparison
compareWith? (lt?) =
  cond(
    lt? -> LT,
    swap?(lt?) -> GT,
    EQ
  )

compare? : Int Int -- Int Int Comparison
compare? = compareWith?(dup2 <)
compare? drop == id

compare : Int Int -- Comparison
compare = compare? dip(drop2)

#
# pack
#

pack0 : -- Pack()
pack0 = 0 0 pack2 inpack(drop2)

unpack0 : Pack() --
unpack0 = drop

pack0 unpack0 == id
unpack0 pack0 == id

pack1 : a -- Pack(a)
pack1 = 0 pack2 inpack(drop)

unpack1 : Pack(a) -- a
unpack1 = inpack(0) unpack2 drop

pack1 unpack1 == id
unpack1 pack1 == id

pack2 unpack2 == id
unpack2 pack2 == id

pack3 : a b c -- Pack(a b c)
pack3 = pack2 pack2 inpack(unpack2)

unpack3 : Pack(a b c) -- a b c
unpack3 = inpack(pack2) unpack2 unpack2

pack3 unpack3 == id
unpack3 pack3 == id

pack4 : a b c d -- Pack(a b c d)
pack4 = pack2 pack3 inpack(unpack2)

unpack4 : Pack(a b c d) -- a b c d
unpack4 = inpack(pack2) unpack3 unpack2

pack4 unpack4 == id
unpack4 pack4 == id

#
# maybe type
#

data Maybe(t)
  none : Maybe(t)
  some : t -- Maybe(t)
end

maybePure : a -- Maybe(a)
maybePure = some

maybeBind(f : a -- Maybe(b)) : Maybe(a) -- Maybe(b)
maybeBind(f) = match(
  none -> none,
  some -> f
)

maybeMap(f : a -- b) : Maybe(a) -- Maybe(b)
maybeMap(f) = maybeBind(f maybePure)


#
# either type
#

data Either(a,b)
  left  : a -- Either(a,b)
  right : b -- Either(a,b)
end

eitherPure : b -- Either(a,b)
eitherPure = right

eitherBind(f : b -- Either(a,c)) : Either(a,b) -- Either(a,c)
eitherBind(f) = match(
  left -> left,
  right -> f
)

eitherMap(f: b -- c) : Either(a,b) -- Either(a,c)
eitherMap(f) = eitherBind(f eitherPure)

