
#
# basic words
#

dup drop == id
dup swap == dup
swap swap == id

nip  : a b -- b
tuck : a b -- b a b
over : a b -- a b a
nip  = dip(drop)
tuck = dup dip(swap)
over = dip(dup) swap
nip drop == drop drop
swap nip == drop
tuck drop == swap
tuck nip == nip dup
over nip == drop dup

rotr : a b c -- c a b
rotl : a b c -- b c a
rotr = swap dip(swap)
rotl = dip(swap) swap
rotl rotr == id
rotr rotl == id
rotl rotl == rotr
rotr rotr == rotl

hide(f : *a b -- *c d) : *a x b -- *c x d
hide(f) = swap dip(f) swap


#
# words over pairs
#

dup2  : a1 a2 -- a1 a2 a1 a2
drop2 : a1 a2 --
swap2 : a1 a2 b1 b2 -- b1 b2 a1 a2
dip2(f : *a -- *b) : *a x y -- *b x y

dup2  = over over
drop2 = drop drop
swap2 = dip(rotr) rotr
dip2(f) = dip(dip(f))

dup2 drop2 == id
dup2 swap2 == dup2
swap2 swap2 == id

nip2  : a1 a2 b1 b2 -- b1 b2
tuck2 : a1 a2 b1 b2 -- b1 b2 a1 a2 b1 b2
over2 : a1 a2 b1 b2 -- a1 a2 b1 b2 a1 a2
nip2  = dip2(drop2)
tuck2 = dup2 dip2(swap2)
over2 = dip2(dup2) swap2

hide2(f : *a b1 b2 -- *c d1 d2) : *a x1 x2 b1 b2 -- *c x1 x2 d1 d2
hide2(f) = swap2 dip2(f) swap2


#
# query words
#

dip?(f : *a -- *a p) : *a b -- *a b p
dip?(f) = dip(f) swap

dip2?(f : *a -- *a p) : *a b1 b2 -- *a b1 b2 p
dip2?(f) = dip?(dip?(f))

hide?(f : *a b -- *a b p) : *a x b -- *a x b p
hide?(f) = swap dip?(f) dip(swap)

#
# bool
#

and : Bool Bool -- Bool
and = if(id, drop false)

true true and == true
true false and == false
false true and == false
false false and == false
true and == id
swap and == and
dup and and == and
and and == dip(and) and

or : Bool Bool -- Bool
or = if(drop true, id)

true true or == true
true false or == true
false true or == true
false false or == false
false or == id
swap or == or
dup or or == or
or or == dip(or) or

not : Bool -- Bool
not = if(false, true)

not not == id
and not == dip(not) not or
or not == dip(not) not and

xor : Bool Bool -- Bool
xor = if(not, id)

true true xor == false
true false xor == true
false true xor == true
false false xor == false

false xor == id
xor xor == dip(xor) xor
xor not == not xor
swap xor == xor

while(f : *a -- *a Bool, g : *a -- *a) : *a -- *a
while(f,g) = f if(g while(f,g), )

and? (f : *a -- *a Bool, g : *a -- *a Bool) : *a -- *a Bool
or?  (f : *a -- *a Bool, g : *a -- *a Bool) : *a -- *a Bool
xor? (f : *a -- *a Bool, g : *a -- *a Bool) : *a -- *a Bool
and? (f, g) = f if(g, false)
or?  (f, g) = f if(true, g)
xor? (f, g) = f if(g not, g)

and? (true, true) == true
and? (true, false) == false
and? (false, true) == false
and? (false, false) == false

or? (true, true) == true
or? (true, false) == true
or? (false, true) == true
or? (false, false) == false

implies? (f : *a -- *a Bool, g : *a -- *a Bool) : *a -- *a Bool
implies? (f, g) = or? (f not, g)

implies? (true, true) == true
implies? (true, false) == false
implies? (false, true) == true
implies? (false, false) == true

iff? (f : *a -- *a Bool, g : *a -- *a Bool) : *a -- *a Bool
iff? (f, g) = xor? (f, g) not

iff? (true, true) == true
iff? (true, false) == false
iff? (false, true) == false
iff? (false, false) == true

#
# arith
#

> : Int Int -- Bool
> = swap <

<= : Int Int -- Bool
<= = > not

>= : Int Int -- Bool
>= = < not

<? : Int Int -- Int Int Bool
<? = dup2 <
<? drop == id

>? : Int Int -- Int Int Bool
>? = dup2 >
>? drop == id

<=? : Int Int -- Int Int Bool
<=? = dup2 <=
<=? drop == id

>=? : Int Int -- Int Int Bool
>=? = dup2 >=
>=? drop == id

neq? : Int Int -- Int Int Bool
neq? = or? (<?, >?)
neq? drop == id

neq : Int Int -- Bool
neq = neq? nip nip
dup  neq == drop false
swap neq == neq

eq? : Int Int -- Int Int Bool
eq? = neq? not
eq? drop == id
eq? == and? (<=?, >=?)

eq : Int Int -- Bool
eq = neq not
dup eq == drop true
dup 1 + eq == drop false
swap eq == eq

0? : Int -- Int Bool
0? = dup 0 eq
0? drop == id

pos? : Int -- Int Bool
pos? = dup 0 >
pos? drop == id

neg? : Int -- Int Bool
neg? = dup 0 <
neg? drop == id

neg : Int -- Int
neg = -1 *

abs : Int -- Int
abs = neg? if(neg, id)

1+ : Int -- Int
1- : Int -- Int
1+ = 1 +
1- = 1 -
1+ 1- == id
1- 1+ == id
0 1+ == 1
0 1- == -1

2* : Int -- Int
2/ : Int -- Int
2% : Int -- Int
2* = 2 *
2/ = 2 /
2% = 2 %

dup 2/ dip(2%) 2* + == id

repeat(f : *a -- *a) : *a Int -- *a
repeat(f) = pos? if(dip(f) 1- repeat(f), drop)

count(f : *a Int -- *a) : *a Int -- *a
count(f) = dip(0) repeat(dup dip(f) 1+) drop

abs dip(0) count(+) == abs dup 1- * 2/
abs while(pos?, dip(1+) 1-) drop == abs +

dup eq == drop true
swap eq == eq

#
# char
#

data Char
  char : Int -- Char
end

char->int : Char -- Int
char->int = match ( char -> id )

char->str : Char -- Str
char->str = match ( char -> _prim_encode1 )

int->char : Int -- Char
int->char = abs char

str->char : Str -- Char
str->char = dup _prim_strlen 0 eq if(
    drop 0 char,
    1 _prim_strbrk drop _prim_decode1 char
  )

Char.generate : Int -- Char
Char.generate = int->char

char->int int->char == id
char->str str->char == id

char< : Char Char -- Bool
char< = dip(char->int) char->int <

char> : Char Char -- Bool
char> = swap char<

char<= : Char Char -- Bool
char<= = dip(char->int) char->int <=

char>= : Char Char -- Bool
char>= = swap char<=

chareq : Char Char -- Bool
chareq = dip(char->int) char->int eq

dup  chareq == drop true
swap chareq == chareq

chareq? : Char Char -- Char Char Bool
chareq? = dup2 chareq

# TODO: add char literals.
'\t' : Char
'\t' = "\t" str->char

'\n' : Char
'\n' = "\n" str->char

'\r' : Char
'\r' = "\r" str->char

'\s' : Char
'\s' = " " str->char

inrange?(a: Str, b: Str) : Char -- Char Bool
inrange?(a,b) = and? ( dup a str->char char>=, dup b str->char char<= )

islower? : Char -- Char Bool
islower? = inrange?("a", "z")
islower? drop == id

isupper? : Char -- Char Bool
isupper? = inrange?("A", "Z")
isupper? drop == id

isdigit? : Char -- Char Bool
isdigit? = inrange?("0", "9")
isdigit? drop == id

isalpha? : Char -- Char Bool
isalpha? = or?(islower?, isupper?)
isalpha? drop == id

#
# str
#

++ : Str Str -- Str
++ = _prim_strcat
"" ++ == id
dip("") ++ == id
++ ++ == dip(++) ++
dip(char->str) ++ str->char == drop

break@ : Str Int -- Str Str
break@ = _prim_strbrk
break@ ++ == drop

len : Str -- Int
len = _prim_strlen
++ len == dip(len) len +

len? : Str -- Str Int
len? = dup len
len? drop == id
len? nip  == len

empty : Str -- Bool
empty = len 0 eq

empty? : Str -- Str Bool
empty? = dup empty
empty? drop == id
empty? nip == empty

data StrView
  strnil  : StrView
  strcons : Char Str -- StrView
end

strview : Str -- StrView
strview = empty? if(
    drop strnil,
    1 break@ dip(_prim_decode1 char) strcons
  )

"" strview == strnil
"a" strview == 97 char "" strcons
" foo" strview == 32 char "foo" strcons

streq : Str Str -- Bool
streq = strview match(
  strnil  -> empty,
  strcons -> rotl strview match(
    strnil  -> drop2 false,
    strcons -> dip(swap dip(chareq)) rotl if(streq, drop2 false)
  )
)

"" "" streq == true
"a" "" streq == false
"" "a" streq == false
"foo" "foo" streq == true
"foo" "bar" streq == false
"bar" "bar" streq == true
"bar" "baz" streq == false
"baz" "baz" streq == true
dup  streq == drop true
swap streq == streq

streq? : Str Str -- Str Str Bool
streq? = dup2 streq

strfold(f : *a Char -- *a) : *a Str -- *a
strfold(f) = strview match(
  strnil  -> id,
  strcons -> dip(f) strfold(f)
)

#
# pack
#

pack0 : -- Pack()
pack0 = 0 0 pack2 inpack(drop2)

unpack0 : Pack() --
unpack0 = drop

pack0 unpack0 == id
unpack0 pack0 == id

pack1 : a -- Pack(a)
pack1 = 0 pack2 inpack(drop)

unpack1 : Pack(a) -- a
unpack1 = inpack(0) unpack2 drop

pack1 unpack1 == id
unpack1 pack1 == id

pack2 unpack2 == id
unpack2 pack2 == id

pack3 : a b c -- Pack(a b c)
pack3 = pack2 pack2 inpack(unpack2)

unpack3 : Pack(a b c) -- a b c
unpack3 = inpack(pack2) unpack2 unpack2

pack3 unpack3 == id
unpack3 pack3 == id

pack4 : a b c d -- Pack(a b c d)
pack4 = pack2 pack3 inpack(unpack2)

unpack4 : Pack(a b c d) -- a b c d
unpack4 = inpack(pack2) unpack3 unpack2

pack4 unpack4 == id
unpack4 pack4 == id


