
#
# basic words
#

dup drop == id
dup swap == dup
swap swap == id

nip  : a b -- b
tuck : a b -- b a b
over : a b -- a b a
nip  = dip(drop)
tuck = dup dip(swap)
over = dip(dup) swap
nip drop == drop drop
swap nip == drop
tuck drop == swap
tuck nip == nip dup
over nip == drop dup

rotr : a b c -- c a b
rotl : a b c -- b c a
rotr = swap dip(swap)
rotl = dip(swap) swap
rotl rotr == id
rotr rotl == id
rotl rotl == rotr
rotr rotr == rotl


#
# words over pairs
#

dup2  : a1 a2 -- a1 a2 a1 a2
drop2 : a1 a2 --
swap2 : a1 a2 b1 b2 -- b1 b2 a1 a2
dip2(f : *a -- *b) : *a x y -- *b x y

dup2  = over over
drop2 = drop drop
swap2 = dip(rotr) rotr
dip2(f) = dip(dip(f))

dup2 drop2 == id
dup2 swap2 == dup2
swap2 swap2 == id

nip2  : a1 a2 b1 b2 -- b1 b2
tuck2 : a1 a2 b1 b2 -- b1 b2 a1 a2 b1 b2
over2 : a1 a2 b1 b2 -- a1 a2 b1 b2 a1 a2
nip2  = dip2(drop2)
tuck2 = dup2 dip2(swap2)
over2 = dip2(dup2) swap2

#
# query words
#

dip?(f : *a -- *a p) : *a b -- *a b p
dip?(f) = dip(f) swap

dip2?(f : *a -- *a p) : *a b1 b2 -- *a b1 b2 p
dip2?(f) = dip?(dip?(f))

#
# bool
#

and : Bool Bool -- Bool
and = if(id, drop false)

true true and == true
true false and == false
false true and == false
false false and == false
true and == id
swap and == and
dup and and == and
and and == dip(and) and

or : Bool Bool -- Bool
or = if(drop true, id)

true true or == true
true false or == true
false true or == true
false false or == false
false or == id
swap or == or
dup or or == or
or or == dip(or) or

not : Bool -- Bool
not = if(false, true)

not not == id
and not == dip(not) not or
or not == dip(not) not and

xor : Bool Bool -- Bool
xor = if(not, id)

true true xor == false
true false xor == true
false true xor == true
false false xor == false

false xor == id
xor xor == dip(xor) xor
xor not == not xor
swap xor == xor

while(f : *a -- *a Bool, g : *a -- *a) : *a -- *a
while(f,g) = f if(g while(f,g), )

and? (f : *a -- *a Bool, g : *a -- *a Bool) : *a -- *a Bool
or?  (f : *a -- *a Bool, g : *a -- *a Bool) : *a -- *a Bool
and? (f, g) = f if(g, false)
or?  (f, g) = f if(true, g)

and? (true, true) == true
and? (true, false) == false
and? (false, true) == false
and? (false, false) == false

or? (true, true) == true
or? (true, false) == true
or? (false, true) == true
or? (false, false) == false


#
# arith
#

> : Int Int -- Bool
> = swap <

<? : Int Int -- Int Int Bool
<? = dup2 <
<? drop == id

>? : Int Int -- Int Int Bool
>? = dup2 >
>? drop == id

neq? : Int Int -- Int Int Bool
neq? = or? (<?, >?)
neq? drop == id

neq : Int Int -- Bool
neq = neq? nip nip

eq? : Int Int -- Int Int Bool
eq? = neq? not
eq? drop == id

eq : Int Int -- Bool
eq = neq not
dup eq == drop true
dup 1 + eq == drop false
swap eq == eq

0? : Int -- Int Bool
0? = dup 0 eq
0? drop == id

pos? : Int -- Int Bool
pos? = dup 0 >
pos? drop == id

neg? : Int -- Int Bool
neg? = dup 0 <
neg? drop == id

neg : Int -- Int
neg = -1 *

abs : Int -- Int
abs = neg? if(neg, id)

1+ : Int -- Int
1- : Int -- Int
1+ = 1 +
1- = 1 -
1+ 1- == id
1- 1+ == id
0 1+ == 1
0 1- == -1

2* : Int -- Int
2/ : Int -- Int
2% : Int -- Int
2* = 2 *
2/ = 2 /
2% = 2 %

dup 2/ dip(2%) 2* + == id

repeat(f : *a -- *a) : *a Int -- *a
repeat(f) = pos? if(dip(f) 1- repeat(f), drop)

count(f : *a Int -- *a) : *a Int -- *a
count(f) = dip(0) repeat(dup dip(f) 1+) drop

abs dip(0) count(+) == abs dup 1- * 2/
abs while(pos?, dip(1+) 1-) drop == abs +

dup eq == drop true
swap eq == eq


#
# str
#

break ++ == drop
++ len == dip(len) len +
abs char ord == abs

len? : Str -- Str Int
len? = dup len
len? drop == id
len? nip  == len

empty : Str -- Bool
empty = len 0 eq

empty? : Str -- Str Bool
empty? = dup empty
empty? drop == id
empty? nip == empty

leneq? : Str Str -- Str Str Bool
leneq? = dip?(len?) dip?(len?) eq

streqto : Str Str Int -- Bool
streqto = pos? if(
  dip(dup2) 1- rotr dip(1 break drop ord) 1 break drop ord
  eq if(streqto, drop drop2 false),
  drop drop2 true)

streq? : Str Str -- Str Str Bool
streq? = and?( leneq?, dup2 len? streqto )

streq : Str Str -- Bool
streq = streq? nip nip

dup streq == drop true
swap streq == streq
dip(dup dip(streq)) streq and == tuck dip2(streq) streq and


